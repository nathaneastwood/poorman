[{"path":"/articles/faq.html","id":"what-is-poorman","dir":"Articles","previous_headings":"","what":"What Is {poorman}?","title":"Frequently Asked Questions","text":"{poorman} package unapologetically attempts recreate {dplyr} API dependency free way using {base} R. {poorman} still development doesn’t {dplyr}’s functionality consider “core” functionality included. idea behind {poorman} user able take {dplyr} based script run using {poorman} without hiccups.","code":""},{"path":"/articles/faq.html","id":"so-what-does-poorman-include","dir":"Articles","previous_headings":"","what":"So What Does {poorman} Include?","title":"Frequently Asked Questions","text":"full list exported functions can seen package website . brief overview, however, {poorman} includes considered “core” functionality offered {dplyr}: {poorman} also includes join functionality. Finally {poorman} includes version pipe need load install magrittr. functionality developed added time.","code":"select(), rename(), pull(), relocate(), mutate(), transmute(), arrange() filter(), slice() summarise() / summarize() group_by(), ungroup() inner_join(), left_join(), right_join(), full_join() anti_join(), semi_join() %>%"},{"path":"/articles/faq.html","id":"why-develop-poorman","dir":"Articles","previous_headings":"","what":"Why Develop {poorman}?","title":"Frequently Asked Questions","text":"probably common question; bother developing {poorman} {dplyr} already exists? Well actually several reasons decided develop . important reason though quite simply can. {poorman} started personal challenge bit fun. Also freelance R developer, good build portfolio open source code can show potential clients. Another reason developing {poorman} wanted challenge common misconception {base} R powerful, good, useful {dplyr}. often see hear comments belittling {base} R user language 10 years now - well inception {dplyr} - find idea worrying. {poorman}’s package start message quite poignant regard. ’d seen father. poor man, watched astonishing things. - Sidney Poitier One aspect overlooked ability teach {base}. Writing {poorman} gives platform hopefully show useRs two key aspects R programming {base}; common data manipulation tasks; non-standard evaluation. Going , helped simpler execution due avoidance C++ code. course, R eventually dispatches primitive internal functionality excluding C++ {poorman} source, make source much easier read useRs used reading C++ understand . turn makes debugging figuring errors much easier .","code":""},{"path":"/articles/faq.html","id":"but-why-not-just-use-dplyr","dir":"Articles","previous_headings":"","what":"But Why Not Just Use {dplyr}?","title":"Frequently Asked Questions","text":"Let’s honest, {tidyverse} fantastic set packages transformed face data analysis R, {dplyr} arguably one important packages within {tidyverse}. API , opinion, easy learn use. part {tidyverse}, however, means {dplyr} comes large number dependencies users must also install often seen disadvantage using {tidyverse}. Disadvantages dependencies written won’t go detail . However say user may need additional parts {tidyverse} may wish install multiple packages use one two functions. dependencies useful course, allowing expansion areas accessing Spark instances databases using API user already knows. great using additional tools absolutely recommend choose {dplyr} {poorman}. However don’t need extra dependencies functionality comes wider {tidyverse} maybe consider giving lightweight {poorman} go. Finally point installation times, {poorman} takes roughly six seconds install. ’ve ever install upgrade {dplyr} {tidyverse}, ’ll recognise fast.","code":""},{"path":"/articles/faq.html","id":"why-the-name-poorman","dir":"Articles","previous_headings":"","what":"Why The Name {poorman}?","title":"Frequently Asked Questions","text":"already mentioned, seen comments past pertaining R’s worthlessness without {tidyverse} name {poorman} subtle play idea must “poor man” use {base}. irony course managed recreate - quite easily - key parts {dplyr} API using {base} R.","code":""},{"path":"/articles/faq.html","id":"why-not-use-data-table-for-the-backend","dir":"Articles","previous_headings":"","what":"Why Not Use {data.table} For The Backend?","title":"Frequently Asked Questions","text":"wanted build something completely dependency free adding {data.table} Import adds dependency.","code":""},{"path":"/articles/faq.html","id":"but-doesnt-poorman-have-dependencies","dir":"Articles","previous_headings":"","what":"But Doesn’t {poorman} Have Dependencies?","title":"Frequently Asked Questions","text":"answer , need define mean “dependency free”. {poorman} dependencies development purposes therefore listed Suggests part DESCRIPTION file. Thus user installs package, dependencies ever installed explicitly requested. However, {poorman} doesn’t dependencies users package need install order use functionality. use dependency packages help develop easily. Therefore {poorman} isn’t truly “dependency free” like data.table , dependency free intended users.","code":""},{"path":"/articles/faq.html","id":"how-does-poorman-compare-in-terms-of-speed","dir":"Articles","previous_headings":"","what":"How Does {poorman} Compare In Terms Of Speed?","title":"Frequently Asked Questions","text":"honesty, things don’t interest . speed genuine concern , just consider {data.table}. Benchmarks comparing {dplyr} {base} done plenty times {poorman} slight overhead {base}.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nathan Eastwood. Author, maintainer. Etienne Bacher. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eastwood N (2022). poorman: Poor Man's Dependency Free Recreation 'dplyr'. https://nathaneastwood.github.io/poorman/, https://github.com/nathaneastwood/poorman.","code":"@Manual{,   title = {poorman: A Poor Man's Dependency Free Recreation of 'dplyr'},   author = {Nathan Eastwood},   year = {2022},   note = {https://nathaneastwood.github.io/poorman/, https://github.com/nathaneastwood/poorman}, }"},{"path":"/contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Contributions via GitHub pull requests gladly accepted original author. participating project, agree abide thoughtbot code conduct. Licensing R Coding Standards git Commit Standards pull request template guide expected pull request project.","code":""},{"path":"/contributing.html","id":"-licensing","dir":"","previous_headings":"","what":"Licensing","title":"Contributing","text":"Along pull requests, please state contribution original work license work project project’s open source license. Whether state explicitly, submitting copyrighted material via pull request, email, means agree license material project’s open source license warrant legal authority .","code":""},{"path":"/contributing.html","id":"-r-coding-standards","dir":"","previous_headings":"","what":"R Coding Standards","title":"Contributing","text":"follow style guide maintained within tidyverse. tested using lintr package; can automatically conform code standards using styler package. Please quality integers L, e.g. 1L.","code":""},{"path":"/contributing.html","id":"-git-commit-standards","dir":"","previous_headings":"","what":"git Commit Standards","title":"Contributing","text":"follow commit message style guide maintained within angular.js project. start commit messages must one following: feat: new feature fix: bug fix doc: Documentation changes style: Changes affect meaning code (white-space, formatting, missing semi-colons, etc) refactor: code change neither fixes bug adds feature perf: code change improves performance test: Adding missing tests chore: Changes build process auxiliary tools libraries documentation generation capitalise first letter.","code":""},{"path":"/index.html","id":"poorman-","dir":"","previous_headings":"","what":"A Poor Mans Dependency Free Recreation of dplyr'","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"’d seen father. poor man, watched astonishing things. - Sidney Poitier","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"{poorman} grammar data manipulation, providing dependency free versions {dplyr} verbs help solve common data manipulation challenges: select() picks variables based names. mutate() adds new variables functions existing variables. filter() picks cases based values. summarise() reduces multiple values single summary. arrange() changes ordering rows. {poorman} attempts replicate {dplyr} API exactly {dplyr} code still run even use {poorman} place. addition replicating {dplyr} functionality, {poorman} implements functionality wider {tidyverse} select helpers pipe, %>%. details functionality available within {poorman}, check {poorman} series blog posts .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"can install: development version GitHub latest release CRAN ","code":"# install.packages(\"remotes\") remotes::install_github(\"nathaneastwood/poorman\") install.packages(\"poorman\")"},{"path":"/index.html","id":"docker","dir":"","previous_headings":"","what":"Docker","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"’d like try latest version package CRAN using Docker, can run latest image :","code":"docker run --rm -it nathaneastwood/poorman"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"","code":"library(poorman, warn.conflicts = FALSE) #  #   I'd seen my father. He was a poor man, and I watched him do astonishing things. #     - Sidney Poitier  mtcars %>%   select(mpg, wt, starts_with(\"c\")) %>%   mutate(kpl = (1.609 * mpg) / 3.785, wt_kg = wt * 453.5924) %>%   filter(mpg > 28) #                 mpg    wt cyl carb      kpl    wt_kg # Fiat 128       32.4 2.200   4    1 13.77321 997.9033 # Honda Civic    30.4 1.615   4    2 12.92301 732.5517 # Toyota Corolla 33.9 1.835   4    1 14.41086 832.3421 # Lotus Europa   30.4 1.513   4    2 12.92301 686.2853  mtcars %>%   group_by(am, cyl) %>%   summarise(mean_mpg = mean(mpg), sd_mpg = sd(mpg)) %>%   ungroup() #   am cyl mean_mpg    sd_mpg # 1  0   4 22.90000 1.4525839 # 2  0   6 19.12500 1.6317169 # 3  0   8 15.05000 2.7743959 # 4  1   4 28.07500 4.4838599 # 5  1   6 20.56667 0.7505553 # 6  1   8 15.40000 0.5656854"},{"path":"/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"A Poor Mans Dependency Free Recreation of dplyr'","text":"{dplyr} {bplyr} - imports {magrittr} {rlang}; prepends functions b_*(), e.g. b_select(). {tbltools} - imports {magrittr} appends *_data() functions, e.g. select_data().","code":""},{"path":"/pull_request_template.html","id":"pull-request-template","dir":"","previous_headings":"","what":"Pull Request Template","title":"NA","text":"Please, go steps submit PR. Please make sure : made changes separate branch. Branches MUST descriptive names start either fix/, feat/ refactor/ prefixes (similar git guidelines project). Good examples : fix/mutate feat/arrange. descriptive commit message short title (first line). commit message follows git commit standards repository. one commit (, squash one commit). tinytest::test_all() throw errors. added new necessary tests test fix new feature. steps, ’re ready open pull request. Give descriptive title PR. Provide description changes. Put Closes #XXXX (Fixes #XXXX) comment auto-close issue PR introduces new feature (fixes), . IMPORTANT: Please review contributing.md file detailed contributing guidelines. PLEASE REMOVE TEMPLATE SUBMITTING","code":""},{"path":"/reference/across.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function (or functions) across multiple columns — across","title":"Apply a function (or functions) across multiple columns — across","text":"across() makes easy apply transformation multiple columns, allowing use select() semantics inside \"data-masking\" functions like summarise() mutate(). if_any() if_all() used apply predicate function selection columns combine results single logical vector. across() supersedes family dplyr \"scoped variants\" like summarise_at(), summarise_if(), summarise_all() therefore functions implemented poorman.","code":""},{"path":"/reference/across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function (or functions) across multiple columns — across","text":"","code":"across(.cols = everything(), .fns = NULL, ..., .names = NULL)  if_any(.cols, .fns = NULL, ..., .names = NULL)  if_all(.cols, .fns = NULL, ..., .names = NULL)"},{"path":"/reference/across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function (or functions) across multiple columns — across","text":".fns Functions apply selected columns. Possible values : NULL, returns columns untransformed. function, e.g. mean. lambda, e.g. ~ mean(.x, na.rm = TRUE) list functions/lambdas, e.g. list(mean = mean, n_miss = ~ sum(.na(.x)) Within functions can use cur_column() cur_group() access current column grouping keys respectively. ... Additional arguments function calls .fns. .names glue specification describes name output columns. can use {.col} stand selected column name, {.fn} stand name function applied. default (NULL) equivalent \"{.col}\" single function case \"{.col}_{.fn}\" case list used .fns. cols, .cols <poor-select> Columns transform. across() used within functions like summarise() mutate(), select compute upon grouping variables.","code":""},{"path":"/reference/across.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function (or functions) across multiple columns — across","text":"across() returns data.frame one column column .cols function .fns. if_any() if_all() return logical vector.","code":""},{"path":"/reference/across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function (or functions) across multiple columns — across","text":"","code":"# across() ----------------------------------------------------------------- iris %>%   group_by(Species) %>%   summarise(across(starts_with(\"Sepal\"), mean)) #>      Species Sepal.Length Sepal.Width #> 1     setosa        5.006       3.428 #> 2 versicolor        5.936       2.770 #> 3  virginica        6.588       2.974 iris %>%   mutate(across(where(is.factor), as.character)) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica  # Additional parameters can be passed to functions iris %>%   group_by(Species) %>%   summarise(across(starts_with(\"Sepal\"), mean, na.rm = TRUE)) #>      Species Sepal.Length Sepal.Width #> 1     setosa        5.006       3.428 #> 2 versicolor        5.936       2.770 #> 3  virginica        6.588       2.974  # A named list of functions iris %>%   group_by(Species) %>%   summarise(across(starts_with(\"Sepal\"), list(mean = mean, sd = sd))) #>      Species Sepal.Length_mean Sepal.Length_sd Sepal.Width_mean Sepal.Width_sd #> 1     setosa             5.006       0.3524897            3.428      0.3790644 #> 2 versicolor             5.936       0.5161711            2.770      0.3137983 #> 3  virginica             6.588       0.6358796            2.974      0.3224966  # Use the .names argument to control the output names iris %>%   group_by(Species) %>%   summarise(     across(starts_with(\"Sepal\"),     mean,     .names = c(\"mean_sepal_length\", \"mean_sepal_width\"))   ) #>      Species mean_sepal_length mean_sepal_width #> 1     setosa             5.006            3.428 #> 2 versicolor             5.936            2.770 #> 3  virginica             6.588            2.974  # if_any() and if_all() ---------------------------------------------------- iris %>%   filter(if_any(ends_with(\"Width\"), ~ . > 4)) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 16          5.7         4.4          1.5         0.4  setosa #> 33          5.2         4.1          1.5         0.1  setosa #> 34          5.5         4.2          1.4         0.2  setosa iris %>%   filter(if_all(ends_with(\"Width\"), ~ . > 2)) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 101          6.3         3.3          6.0         2.5 virginica #> 103          7.1         3.0          5.9         2.1 virginica #> 105          6.5         3.0          5.8         2.2 virginica #> 106          7.6         3.0          6.6         2.1 virginica #> 110          7.2         3.6          6.1         2.5 virginica #> 113          6.8         3.0          5.5         2.1 virginica #> 115          5.8         2.8          5.1         2.4 virginica #> 116          6.4         3.2          5.3         2.3 virginica #> 118          7.7         3.8          6.7         2.2 virginica #> 119          7.7         2.6          6.9         2.3 virginica #> 121          6.9         3.2          5.7         2.3 virginica #> 125          6.7         3.3          5.7         2.1 virginica #> 129          6.4         2.8          5.6         2.1 virginica #> 133          6.4         2.8          5.6         2.2 virginica #> 136          7.7         3.0          6.1         2.3 virginica #> 137          6.3         3.4          5.6         2.4 virginica #> 140          6.9         3.1          5.4         2.1 virginica #> 141          6.7         3.1          5.6         2.4 virginica #> 142          6.9         3.1          5.1         2.3 virginica #> 144          6.8         3.2          5.9         2.3 virginica #> 145          6.7         3.3          5.7         2.5 virginica #> 146          6.7         3.0          5.2         2.3 virginica #> 149          6.2         3.4          5.4         2.3 virginica"},{"path":"/reference/arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange rows by variables — arrange","title":"Arrange rows by variables — arrange","text":"Order rows data.frame expression involving variables.","code":""},{"path":"/reference/arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange rows by variables — arrange","text":"","code":"arrange(.data, ...)"},{"path":"/reference/arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange rows by variables — arrange","text":".data data.frame. ... comma separated vector unquoted name(s) order data .","code":""},{"path":"/reference/arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange rows by variables — arrange","text":"data.frame.","code":""},{"path":"/reference/arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange rows by variables — arrange","text":"","code":"arrange(mtcars, mpg) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 mtcars %>% arrange(mpg) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 mtcars %>% arrange(cyl, mpg) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2"},{"path":"/reference/between.html","id":null,"dir":"Reference","previous_headings":"","what":"Do values in a numeric vector fall in specified range? — between","title":"Do values in a numeric vector fall in specified range? — between","text":"shortcut x >= left & x <= right.","code":""},{"path":"/reference/between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do values in a numeric vector fall in specified range? — between","text":"","code":"between(x, left, right)"},{"path":"/reference/between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do values in a numeric vector fall in specified range? — between","text":"x numeric vector values. left, right Boundary values.","code":""},{"path":"/reference/between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do values in a numeric vector fall in specified range? — between","text":"logical vector length x.","code":""},{"path":"/reference/between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do values in a numeric vector fall in specified range? — between","text":"","code":"between(1:12, 7, 9) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  x <- rnorm(1e2) x[between(x, -1, 1)] #>  [1] -0.19367115 -0.56100128 -0.76848262  0.98568173  0.68271628 -0.03644658 #>  [7]  0.67786351 -0.11830113  0.92072796  0.37221910  0.11025875 -0.06135823 #> [13] -0.09502388  0.20579420  0.19364171 -0.70382427 -0.22541906 -0.12810173 #> [19]  0.41942262  0.55083579 -0.75609471  0.49509598  0.22892269  0.28880744 #> [25]  0.25548461 -0.27805384  0.06199375  0.44169602 -0.30922184  0.53173726 #> [31]  0.22519785 -0.40109434 -0.24358818 -0.52380040 -0.63795794  0.79514801 #> [37]  0.34861173 -0.30607039 -0.78715333 -0.40361533 -0.95297603 -0.40283596 #> [43]  0.37418207 -0.01102508  0.52511246  0.29613884  0.70864059 -0.25731475 #> [49] -0.81022085  0.36700621 -0.51297643  0.53774998  0.52695197 -0.45687212 #> [55]  0.93826999  0.47206497  0.13985772  0.86835897 -0.01335154  0.46535442 #> [61]  0.13708455  0.96979466 -0.26305537  0.70139070  0.18337503  0.85900637 #> [67]  0.61775698  0.64061158"},{"path":"/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiently bind multiple data.frames by row and column — bind","title":"Efficiently bind multiple data.frames by row and column — bind","text":"Efficiently bind multiple data.frames row column","code":""},{"path":"/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiently bind multiple data.frames by row and column — bind","text":"","code":"bind_cols(...)  bind_rows(..., .id = NULL)"},{"path":"/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiently bind multiple data.frames by row and column — bind","text":"... data.frames combine. argument can either data.frame, list data.frame, list data.frames. row-binding, columns matched name, missing columns filled NA. column-binding, rows matched position, data.frames must number rows. match value, position, see mutate_joins. .id character(1). data.frame identifier. .id supplied, new column identifiers created link row original data.frame. labels taken named arguments bind_rows(). list data.frames supplied, labels taken names list. names found numeric sequence used instead.","code":""},{"path":"/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiently bind multiple data.frames by row and column — bind","text":"","code":"one <- mtcars[1:4, ] two <- mtcars[9:12, ]  # You can supply data frames as arguments: bind_rows(one, two) #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE     16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  # The contents of lists are spliced automatically: bind_rows(list(one, two)) #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE     16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 bind_rows(split(mtcars, mtcars$cyl)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 bind_rows(list(one, two), list(two, one)) #>                  mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4       21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag   21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710      22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230        22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280        19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C       17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE      16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 2301       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 2801       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C1      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE1     16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Mazda RX41      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag1  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 7101     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  # In addition to data frames, you can supply vectors. In the rows # direction, the vectors represent rows and should have inner # names: bind_rows(   c(a = 1, b = 2),   c(a = 3, b = 4) ) #>   a b #> 1 1 2 #> 2 3 4  # You can mix vectors and data frames: bind_rows(   c(a = 1, b = 2),   data.frame(a = 3:4, b = 5:6),   c(a = 7, b = 8) ) #>   a b #> 1 1 2 #> 2 3 5 #> 3 4 6 #> 4 7 8  # When you supply a column name with the `.id` argument, a new # column is created to link each row to its original data frame bind_rows(list(one, two), .id = \"id\") #>                id  mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4       1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag   1 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710      1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive  1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230        2 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280        2 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C       2 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE      2 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 bind_rows(list(a = one, b = two), .id = \"id\") #>                id  mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4       a 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag   a 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710      a 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive  a 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230        b 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280        b 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C       b 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE      b 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 bind_rows(\"group 1\" = one, \"group 2\" = two, .id = \"groups\") #>                 groups  mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      group 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  group 1 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710     group 1 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive group 1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 230       group 2 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280       group 2 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      group 2 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE     group 2 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  if (FALSE) { # Rows need to match when column-binding bind_cols(data.frame(x = 1:3), data.frame(y = 1:2))  # even with 0 columns bind_cols(data.frame(x = 1:3), data.frame()) }  bind_cols(one, two) #>                 mpg cyl disp  hp drat    wt  qsec vs am gear carb  mpg cyl #> Mazda RX4      21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 22.8   4 #> Mazda RX4 Wag  21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 19.2   6 #> Datsun 710     22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 17.8   6 #> Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 16.4   8 #>                 disp  hp drat   wt qsec vs am gear carb #> Mazda RX4      140.8  95 3.92 3.15 22.9  1  0    4    2 #> Mazda RX4 Wag  167.6 123 3.92 3.44 18.3  1  0    4    4 #> Datsun 710     167.6 123 3.92 3.44 18.9  1  0    4    4 #> Hornet 4 Drive 275.8 180 3.07 4.07 17.4  0  0    3    3 bind_cols(list(one, two)) #>                 mpg cyl disp  hp drat    wt  qsec vs am gear carb  mpg cyl #> Mazda RX4      21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 22.8   4 #> Mazda RX4 Wag  21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 19.2   6 #> Datsun 710     22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 17.8   6 #> Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 16.4   8 #>                 disp  hp drat   wt qsec vs am gear carb #> Mazda RX4      140.8  95 3.92 3.15 22.9  1  0    4    2 #> Mazda RX4 Wag  167.6 123 3.92 3.44 18.3  1  0    4    4 #> Datsun 710     167.6 123 3.92 3.44 18.9  1  0    4    4 #> Hornet 4 Drive 275.8 180 3.07 4.07 17.4  0  0    3    3"},{"path":"/reference/case_when.html","id":null,"dir":"Reference","previous_headings":"","what":"A General Vetorised if() — case_when","title":"A General Vetorised if() — case_when","text":"function allows vectorise multiple if_else() statements. R equivalent SQL CASE statement. cases match, NA returned.","code":""},{"path":"/reference/case_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A General Vetorised if() — case_when","text":"","code":"case_when(...)"},{"path":"/reference/case_when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A General Vetorised if() — case_when","text":"... sequence two-sided formulas. left hand side (LHS) determines values match case. right hand side (RHS) provides replacement value. LHS must evaluate logical vector. RHS need logical, RHSs must evaluate type vector. LHS RHS may length either 1 n. value n must consistent across cases. case n == 0 treated variant n != 1. NULL inputs ignored.","code":""},{"path":"/reference/case_when.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A General Vetorised if() — case_when","text":"vector length 1 n, matching length logical input output vectors, type (attributes) first RHS. Inconsistent lengths types generate error.","code":""},{"path":"/reference/case_when.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A General Vetorised if() — case_when","text":"","code":"x <- 1:50 case_when(   x %% 35 == 0 ~ \"fizz buzz\",   x %% 5 == 0 ~ \"fizz\",   x %% 7 == 0 ~ \"buzz\",   TRUE ~ as.character(x) ) #>  [1] \"1\"         \"2\"         \"3\"         \"4\"         \"fizz\"      \"6\"         #>  [7] \"buzz\"      \"8\"         \"9\"         \"fizz\"      \"11\"        \"12\"        #> [13] \"13\"        \"buzz\"      \"fizz\"      \"16\"        \"17\"        \"18\"        #> [19] \"19\"        \"fizz\"      \"buzz\"      \"22\"        \"23\"        \"24\"        #> [25] \"fizz\"      \"26\"        \"27\"        \"buzz\"      \"29\"        \"fizz\"      #> [31] \"31\"        \"32\"        \"33\"        \"34\"        \"fizz buzz\" \"36\"        #> [37] \"37\"        \"38\"        \"39\"        \"fizz\"      \"41\"        \"buzz\"      #> [43] \"43\"        \"44\"        \"fizz\"      \"46\"        \"47\"        \"48\"        #> [49] \"buzz\"      \"fizz\"       # Like an if statement, the arguments are evaluated in order, so you must # proceed from the most specific to the most general. This won't work: case_when(   TRUE ~ as.character(x),   x %%  5 == 0 ~ \"fizz\",   x %%  7 == 0 ~ \"buzz\",   x %% 35 == 0 ~ \"fizz buzz\" ) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" #> [31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" #> [46] \"46\" \"47\" \"48\" \"49\" \"50\"  # If none of the cases match, NA is used: case_when(   x %%  5 == 0 ~ \"fizz\",   x %%  7 == 0 ~ \"buzz\",   x %% 35 == 0 ~ \"fizz buzz\" ) #>  [1] NA     NA     NA     NA     \"fizz\" NA     \"buzz\" NA     NA     \"fizz\" #> [11] NA     NA     NA     \"buzz\" \"fizz\" NA     NA     NA     NA     \"fizz\" #> [21] \"buzz\" NA     NA     NA     \"fizz\" NA     NA     \"buzz\" NA     \"fizz\" #> [31] NA     NA     NA     NA     \"fizz\" NA     NA     NA     NA     \"fizz\" #> [41] NA     \"buzz\" NA     NA     \"fizz\" NA     NA     NA     \"buzz\" \"fizz\"  # Note that NA values in the vector x do not get special treatment. If you want # to explicitly handle NA values you can use the `is.na` function: x[2:4] <- NA_real_ case_when(   x %% 35 == 0 ~ \"fizz buzz\",   x %% 5 == 0 ~ \"fizz\",   x %% 7 == 0 ~ \"buzz\",   is.na(x) ~ \"nope\",   TRUE ~ as.character(x) ) #>  [1] \"1\"         \"nope\"      \"nope\"      \"nope\"      \"fizz\"      \"6\"         #>  [7] \"buzz\"      \"8\"         \"9\"         \"fizz\"      \"11\"        \"12\"        #> [13] \"13\"        \"buzz\"      \"fizz\"      \"16\"        \"17\"        \"18\"        #> [19] \"19\"        \"fizz\"      \"buzz\"      \"22\"        \"23\"        \"24\"        #> [25] \"fizz\"      \"26\"        \"27\"        \"buzz\"      \"29\"        \"fizz\"      #> [31] \"31\"        \"32\"        \"33\"        \"34\"        \"fizz buzz\" \"36\"        #> [37] \"37\"        \"38\"        \"39\"        \"fizz\"      \"41\"        \"buzz\"      #> [43] \"43\"        \"44\"        \"fizz\"      \"46\"        \"47\"        \"48\"        #> [49] \"buzz\"      \"fizz\"       # All RHS values need to be of the same type. Inconsistent types will throw an error. # This applies also to NA values used in RHS: NA is logical, use # typed values like NA_real_, NA_complex, NA_character_, NA_integer_ as appropriate. case_when(   x %% 35 == 0 ~ NA_character_,   x %% 5 == 0 ~ \"fizz\",   x %% 7 == 0 ~ \"buzz\",   TRUE ~ as.character(x) ) #>  [1] \"1\"    NA     NA     NA     \"fizz\" \"6\"    \"buzz\" \"8\"    \"9\"    \"fizz\" #> [11] \"11\"   \"12\"   \"13\"   \"buzz\" \"fizz\" \"16\"   \"17\"   \"18\"   \"19\"   \"fizz\" #> [21] \"buzz\" \"22\"   \"23\"   \"24\"   \"fizz\" \"26\"   \"27\"   \"buzz\" \"29\"   \"fizz\" #> [31] \"31\"   \"32\"   \"33\"   \"34\"   NA     \"36\"   \"37\"   \"38\"   \"39\"   \"fizz\" #> [41] \"41\"   \"buzz\" \"43\"   \"44\"   \"fizz\" \"46\"   \"47\"   \"48\"   \"buzz\" \"fizz\" case_when(   x %% 35 == 0 ~ 35,   x %% 5 == 0 ~ 5,   x %% 7 == 0 ~ 7,   TRUE ~ NA_real_ ) #>  [1] NA NA NA NA  5 NA  7 NA NA  5 NA NA NA  7  5 NA NA NA NA  5  7 NA NA NA  5 #> [26] NA NA  7 NA  5 NA NA NA NA 35 NA NA NA NA  5 NA  7 NA NA  5 NA NA NA  7  5  # case_when() evaluates all RHS expressions, and then constructs its # result by extracting the selected (via the LHS expressions) parts. # In particular NaN are produced in this case: y <- seq(-2, 2, by = .5) case_when(   y >= 0 ~ sqrt(y),   TRUE   ~ y ) #> Warning: NaNs produced #> [1] -2.0000000 -1.5000000 -1.0000000 -0.5000000  0.0000000  0.7071068  1.0000000 #> [8]  1.2247449  1.4142136  if (FALSE) { case_when(   x %% 35 == 0 ~ 35,   x %% 5 == 0 ~ 5,   x %% 7 == 0 ~ 7,   TRUE ~ NA ) }  # case_when is particularly useful inside mutate when you want to # create a new variable that relies on a complex combination of existing # variables mtcars %>%   mutate(     efficient = case_when(       mpg > 25 ~ TRUE,       TRUE ~ FALSE     )   ) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>                     efficient #> Mazda RX4               FALSE #> Mazda RX4 Wag           FALSE #> Datsun 710              FALSE #> Hornet 4 Drive          FALSE #> Hornet Sportabout       FALSE #> Valiant                 FALSE #> Duster 360              FALSE #> Merc 240D               FALSE #> Merc 230                FALSE #> Merc 280                FALSE #> Merc 280C               FALSE #> Merc 450SE              FALSE #> Merc 450SL              FALSE #> Merc 450SLC             FALSE #> Cadillac Fleetwood      FALSE #> Lincoln Continental     FALSE #> Chrysler Imperial       FALSE #> Fiat 128                 TRUE #> Honda Civic              TRUE #> Toyota Corolla           TRUE #> Toyota Corona           FALSE #> Dodge Challenger        FALSE #> AMC Javelin             FALSE #> Camaro Z28              FALSE #> Pontiac Firebird        FALSE #> Fiat X1-9                TRUE #> Porsche 914-2            TRUE #> Lotus Europa             TRUE #> Ford Pantera L          FALSE #> Ferrari Dino            FALSE #> Maserati Bora           FALSE #> Volvo 142E              FALSE"},{"path":"/reference/coalesce.html","id":null,"dir":"Reference","previous_headings":"","what":"Find first non-missing element — coalesce","title":"Find first non-missing element — coalesce","text":"Given set vectors, coalesce() finds first non-missing value position. inspired SQL COALESCE function thing NULLs.","code":""},{"path":"/reference/coalesce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find first non-missing element — coalesce","text":"","code":"coalesce(...)"},{"path":"/reference/coalesce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find first non-missing element — coalesce","text":"... Vectors. Inputs recyclable (either length 1L n) coercible common type.","code":""},{"path":"/reference/coalesce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find first non-missing element — coalesce","text":"Currently, coalesce() type checking take place.","code":""},{"path":[]},{"path":"/reference/coalesce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find first non-missing element — coalesce","text":"","code":"# Use a single value to replace all missing vectors x <- sample(c(1:5, NA, NA, NA)) coalesce(x, 0L) #> [1] 4 0 0 5 0 2 3 1  # Or match together a complete vector from missing pieces y <- c(1, 2, NA, NA, 5) z <- c(NA, NA, 3, 4, 5) coalesce(y, z) #> [1] 1 2 3 4 5"},{"path":"/reference/context.html","id":null,"dir":"Reference","previous_headings":"","what":"Context dependent expressions — context","title":"Context dependent expressions — context","text":"functions return information \"current\" group \"current\" variable, work inside specific contexts like summarise() mutate(). n() gives number observations current group. cur_data() gives current data current group (excluding grouping variables). cur_data_all() gives current data current group (including grouping variables). cur_group() gives group keys, single row data.frame containing column grouping variable value. cur_group_id() gives unique numeric identifier current group. cur_group_rows() gives rows groups appear data. cur_column() gives name current column (across() ).","code":""},{"path":"/reference/context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Context dependent expressions — context","text":"","code":"n()  cur_data()  cur_data_all()  cur_group()  cur_group_id()  cur_group_rows()  cur_column()"},{"path":"/reference/context.html","id":"data-table","dir":"Reference","previous_headings":"","what":"data.table","title":"Context dependent expressions — context","text":"familiar data.table: cur_data() <-> .SD cur_group_id() <-> .GRP cur_group() <-> .cur_group_rows() <-> .","code":""},{"path":[]},{"path":"/reference/context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Context dependent expressions — context","text":"","code":"df <- data.frame(   g = sample(rep(letters[1:3], 1:3)),   x = runif(6),   y = runif(6),   stringsAsFactors = FALSE ) gf <- df %>% group_by(g)  gf %>% summarise(n = n()) #>   g n #> 1 a 1 #> 2 b 2 #> 3 c 3  gf %>% mutate(id = cur_group_id()) #>   g         x         y id #> 1 c 0.4027718 0.2397542  3 #> 2 b 0.3656344 0.1846332  2 #> 3 a 0.1876539 0.9422748  1 #> 4 c 0.5894307 0.8907756  3 #> 5 b 0.9135131 0.1103067  2 #> 6 c 0.3279667 0.8832027  3 gf %>% summarise(row = cur_group_rows()) #> `summarise()` has grouped output by 'g'. You can override using the `.groups` argument. #>   g row #> 1 a   3 #> 2 b   2 #> 3 b   5 #> 4 c   1 #> 5 c   4 #> 6 c   6 gf %>% summarise(data = list(cur_group())) #>   g data #> 1 a    a #> 2 b    b #> 3 c    c gf %>% summarise(data = list(cur_data())) #>   g                                                             data #> 1 a                                             0.1876539, 0.9422748 #> 2 b                       0.3656344, 0.9135131, 0.1846332, 0.1103067 #> 3 c 0.4027718, 0.5894307, 0.3279667, 0.2397542, 0.8907756, 0.8832027 gf %>% summarise(data = list(cur_data_all())) #>   g #> 1 a #> 2 b #> 3 c #>                                                                                                                      data #> 1                                                                                 a, 0.187653874978423, 0.942274785134941 #> 2                                        b, b, 0.365634423214942, 0.913513098144904, 0.184633162105456, 0.110306689981371 #> 3 c, c, c, 0.402771807275712, 0.58943066210486, 0.327966745244339, 0.239754236768931, 0.89077560743317, 0.883202653145418  gf %>% mutate(across(everything(), ~ paste(cur_column(), round(.x, 2)))) #>   g      x      y #> 1 c  x 0.4 y 0.24 #> 2 b x 0.37 y 0.18 #> 3 a x 0.19 y 0.94 #> 4 c x 0.59 y 0.89 #> 5 b x 0.91 y 0.11 #> 6 c x 0.33 y 0.88"},{"path":"/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations by group — count","title":"Count observations by group — count","text":"count() lets quickly count unique values one variables: df %>% count(, b) roughly equivalent df %>% group_by(, b) %>% summarise(n = n()). count() paired tally(), lower-level helper equivalent df %>% summarise(n = n()). Supply wt perform weighted counts, switching summary n = n() n = sum(wt). add_count() add_tally() equivalent count() tally() use mutate() instead summarise() add new column group-wise counts.","code":""},{"path":"/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations by group — count","text":"","code":"count(x, ..., wt = NULL, sort = FALSE, name = NULL)  tally(x, wt = NULL, sort = FALSE, name = NULL)  add_count(x, ..., wt = NULL, sort = FALSE, name = NULL)  add_tally(x, wt = NULL, sort = FALSE, name = NULL)"},{"path":"/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count observations by group — count","text":"x data.frame. ... Variables group . wt omitted, count number rows. specified, perform \"weighted\" count summing (non-missing) values variable wt. omitted, column n exists, automatically used weighting variable, although specify name provide new name output. sort logical(1). TRUE, show largest groups top. name character(1). name new column output. omitted, default n. already column called n, error, require specify name.","code":""},{"path":"/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count observations by group — count","text":"data.frame. count() add_count() groups input.","code":""},{"path":"/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count observations by group — count","text":"","code":"# count() is a convenient way to get a sense of the distribution of # values in a dataset mtcars %>% count(cyl) #>   cyl  n #> 1   4 11 #> 2   6  7 #> 3   8 14 mtcars %>% count(cyl, sort = TRUE) #>   cyl  n #> 1   8 14 #> 2   4 11 #> 3   6  7 mtcars %>% count(cyl, am, sort = TRUE) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` argument. #>   cyl am  n #> 1   8  0 12 #> 2   4  1  8 #> 3   6  0  4 #> 4   4  0  3 #> 5   6  1  3 #> 6   8  1  2 # Note that if the data are already grouped, count() adds an additional grouping variable # which is removed afterwards mtcars %>% group_by(gear) %>% count(cyl) #> `summarise()` has grouped output by 'gear'. You can override using the `.groups` argument. #>   gear cyl  n #> 1    3   4  1 #> 2    3   6  2 #> 3    3   8 12 #> 4    4   4  8 #> 5    4   6  4 #> 6    5   4  2 #> 7    5   6  1 #> 8    5   8  2  # tally() is a lower-level function that assumes you've done the grouping mtcars %>% tally() #>    n #> 1 32 mtcars %>% group_by(cyl) %>% tally() #>   cyl  n #> 1   4 11 #> 2   6  7 #> 3   8 14  # both count() and tally() have add_ variants that work like mutate() instead of summarise mtcars %>% add_count(cyl, wt = am) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb n #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 3 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 3 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 8 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 3 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 3 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 8 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 8 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 3 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 3 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 2 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 2 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 2 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 2 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 2 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 8 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 8 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 8 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 8 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 2 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 8 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 8 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 3 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 2 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 8 mtcars %>% add_tally(wt = am) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb  n #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 13 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 13 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 13 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 13 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 13 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 13 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 13 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 13 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 13 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 13 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 13 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 13 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 13 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 13 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 13 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 13 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 13 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 13 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 13 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 13 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 13 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 13 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 13 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 13 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 13 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 13 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 13 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 13 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 13 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 13 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 13 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 13"},{"path":"/reference/cummean.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative versions of any, all, and mean — cummean","title":"Cumulative versions of any, all, and mean — cummean","text":"poorman provides cumall(), cumany(), cummean() complete R's set cumulative functions.","code":""},{"path":"/reference/cummean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative versions of any, all, and mean — cummean","text":"","code":"cummean(x)  cumany(x)  cumall(x)"},{"path":"/reference/cummean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative versions of any, all, and mean — cummean","text":"x cumall() cumany(), logical vector; cummean() integer numeric vector.","code":""},{"path":"/reference/cummean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative versions of any, all, and mean — cummean","text":"vector length x.","code":""},{"path":"/reference/cummean.html","id":"cumulative-logical-functions","dir":"Reference","previous_headings":"","what":"Cumulative logical functions","title":"Cumulative versions of any, all, and mean — cummean","text":"particularly useful conjunction filter(): cumall(x): cases first FALSE. cumall(!x): cases first TRUE. cumany(x): cases first TRUE. cumany(!x): cases first FALSE.","code":""},{"path":"/reference/cummean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative versions of any, all, and mean — cummean","text":"","code":"# `cummean()` returns a numeric/integer vector of the same length # as the input vector. x <- c(1, 3, 5, 2, 2) cummean(x) #> [1] 1.00 2.00 3.00 2.75 2.60 cumsum(x) / seq_along(x) #> [1] 1.00 2.00 3.00 2.75 2.60  # `cumall()` and `cumany()` return logicals cumall(x < 5) #> [1]  TRUE  TRUE FALSE FALSE FALSE cumany(x == 3) #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  # `cumall()` vs. `cumany()` df <- data.frame(   date = as.Date(\"2020-01-01\") + 0:6,   balance = c(100, 50, 25, -25, -50, 30, 120) ) # all rows after first overdraft df %>% filter(cumany(balance < 0)) #>         date balance #> 4 2020-01-04     -25 #> 5 2020-01-05     -50 #> 6 2020-01-06      30 #> 7 2020-01-07     120 # all rows until first overdraft df %>% filter(cumall(!(balance < 0))) #>         date balance #> 1 2020-01-01     100 #> 2 2020-01-02      50 #> 3 2020-01-03      25"},{"path":"/reference/desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Descending order — desc","title":"Descending order — desc","text":"Transform vector format sorted descending order. useful within arrange().","code":""},{"path":"/reference/desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descending order — desc","text":"","code":"desc(x)"},{"path":"/reference/desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descending order — desc","text":"x vector transform.","code":""},{"path":"/reference/desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descending order — desc","text":"vector length x.","code":""},{"path":"/reference/desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descending order — desc","text":"","code":"desc(1:10) #>  [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10 desc(factor(letters)) #>  [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 #> [20] -20 -21 -22 -23 -24 -25 -26  first_day <- seq(as.Date(\"1910/1/1\"), as.Date(\"1920/1/1\"), \"years\") desc(first_day) #>  [1] 21915 21550 21185 20819 20454 20089 19724 19358 18993 18628 18263  mtcars %>% arrange(desc(mpg)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4"},{"path":"/reference/distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset distinct/unique rows — distinct","title":"Subset distinct/unique rows — distinct","text":"Select distinct/unique rows data.frame.","code":""},{"path":"/reference/distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset distinct/unique rows — distinct","text":"","code":"distinct(.data, ..., .keep_all = FALSE)"},{"path":"/reference/distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset distinct/unique rows — distinct","text":".data data.frame. ... Optional variables use determining uniqueness. multiple rows given combination inputs, first row preserved. omitted, use variables. .keep_all logical(1). TRUE, keep variables .data. combination ... distinct, keeps first row values.","code":""},{"path":"/reference/distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset distinct/unique rows — distinct","text":"data.frame following properties: Rows subset input appear order. Columns modified ... empty .keep_all TRUE. Otherwise, distinct() first calls mutate() create new columns. Groups modified. data.frame attributes preserved.","code":""},{"path":"/reference/distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset distinct/unique rows — distinct","text":"","code":"df <- data.frame(   x = sample(10, 100, rep = TRUE),   y = sample(10, 100, rep = TRUE) ) nrow(df) #> [1] 100 nrow(distinct(df)) #> [1] 63 nrow(distinct(df, x, y)) #> [1] 63  distinct(df, x) #>     x #> 1  10 #> 2   7 #> 3   9 #> 4   3 #> 5   8 #> 6   4 #> 7   5 #> 8   6 #> 9   2 #> 10  1 distinct(df, y) #>     y #> 1   4 #> 2   1 #> 3   8 #> 4   6 #> 5   3 #> 6  10 #> 7   2 #> 8   7 #> 9   9 #> 10  5  # You can choose to keep all other variables as well distinct(df, x, .keep_all = TRUE) #>     x y #> 1  10 4 #> 2   7 1 #> 3   9 8 #> 4   3 8 #> 5   8 4 #> 6   4 8 #> 7   5 6 #> 8   6 3 #> 9   2 2 #> 10  1 9 distinct(df, y, .keep_all = TRUE) #>     x  y #> 1  10  4 #> 2   7  1 #> 3   9  8 #> 4   5  6 #> 5   7  3 #> 6   9 10 #> 7   9  2 #> 8   4  7 #> 9   5  9 #> 10  3  5  # You can also use distinct on computed variables distinct(df, diff = abs(x - y)) #>   diff #> 1    6 #> 2    1 #> 3    5 #> 4    4 #> 5    7 #> 6    2 #> 7    3 #> 8    0 #> 9    8  # The same behaviour applies for grouped data frames, # except that the grouping variables are always included df <- data.frame(   g = c(1, 1, 2, 2),   x = c(1, 1, 2, 1) ) %>% group_by(g) df %>% distinct(x) #>   g x #> 1 1 1 #> 2 2 2 #> 3 2 1"},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Return rows with matching conditions — filter","title":"Return rows with matching conditions — filter","text":"Use filter() choose rows/cases conditions TRUE.","code":""},{"path":"/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return rows with matching conditions — filter","text":"","code":"filter(.data, ..., .preserve = FALSE)"},{"path":"/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return rows with matching conditions — filter","text":".data data.frame. ... Logical predicated defined terms variables .data. Multiple conditions combined &. Arguments within ... automatically quoted evaluated within context data.frame. .preserve logical(1). Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return rows with matching conditions — filter","text":"data.frame.","code":""},{"path":"/reference/filter.html","id":"useful-filter-functions","dir":"Reference","previous_headings":"","what":"Useful filter functions","title":"Return rows with matching conditions — filter","text":"==, >, >=, etc. &, |, !, xor() .na()","code":""},{"path":"/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return rows with matching conditions — filter","text":"","code":"filter(mtcars, am == 1) #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 mtcars %>% filter(cyl == 4) #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 mtcars %>% filter(cyl <= 5 & am > 0) #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 mtcars %>% filter(cyl == 4 | cyl == 8) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 mtcars %>% filter(!(cyl %in% c(4, 6)), am != 0) #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8"},{"path":"/reference/filter_joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering joins filter rows from x based on the presence or absence of\nmatches in y: — filter_joins","title":"Filtering joins filter rows from x based on the presence or absence of\nmatches in y: — filter_joins","text":"semi_join() return rows x match y. anti_join() return rows x without match y.","code":""},{"path":"/reference/filter_joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering joins filter rows from x based on the presence or absence of\nmatches in y: — filter_joins","text":"","code":"anti_join(x, y, by = NULL)  semi_join(x, y, by = NULL)"},{"path":"/reference/filter_joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering joins filter rows from x based on the presence or absence of\nmatches in y: — filter_joins","text":"x, y data.frames join. character vector variables join . NULL, default, *_join() natural join, using variables common names across two tables. message lists variables can check right (suppress message, simply explicitly list variables want join).","code":""},{"path":"/reference/filter_joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering joins filter rows from x based on the presence or absence of\nmatches in y: — filter_joins","text":"","code":"table1 <- data.frame(   pupil = rep(1:3, each = 2),   test = rep(c(\"A\", \"B\"), 3),   score = c(60, 70, 65, 80, 85, 70),   stringsAsFactors = FALSE ) table2 <- table1[c(1, 3, 4), ]  table1 %>% anti_join(table2, by = c(\"pupil\", \"test\")) #>   pupil test score #> 1     1    B    70 #> 2     3    A    85 #> 3     3    B    70 table1 %>% semi_join(table2, by = c(\"pupil\", \"test\")) #>   pupil test score #> 1     1    A    60 #> 2     2    A    65 #> 3     2    B    80"},{"path":"/reference/glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a glimpse of your data — glimpse","title":"Get a glimpse of your data — glimpse","text":"glimpse() like transposed version print(): columns run page, data runs across. makes possible see every column data.frame. wrapper around utils::str() returns input (invisibly) meaning can used within data pipeline.","code":""},{"path":"/reference/glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a glimpse of your data — glimpse","text":"","code":"glimpse(x, width = getOption(\"width\"), ...)"},{"path":"/reference/glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a glimpse of your data — glimpse","text":"x object glimpse . width integer(1). Width output. ... Additional parameters pass utils::str().","code":""},{"path":"/reference/glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a glimpse of your data — glimpse","text":"x, invisibly.","code":""},{"path":"/reference/glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a glimpse of your data — glimpse","text":"","code":"glimpse(mtcars) #> 'data.frame':\t32 obs. of  11 variables: #>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ... #>  $ disp: num  160 160 108 258 360 ... #>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ... #>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ... #>  $ qsec: num  16.5 17 18.6 19.4 17 ... #>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ... #>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ... #>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ... #>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."},{"path":"/reference/group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by","title":"Group by one or more variables — group_by","text":"Determine groups within data.frame perform operations . ungroup() removes grouping levels.","code":""},{"path":"/reference/group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — group_by","text":"","code":"group_by(.data, ..., .add = FALSE, .drop = group_by_drop_default(.data))  ungroup(x, ...)"},{"path":"/reference/group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — group_by","text":".data data.frame. data group. ... One unquoted column names group/ungroup data . .add logical(1). FALSE (default) group_by() override existing groups. add existing groups, use .add = TRUE. .drop logical(1). Drop groups formed factor levels appear data? default TRUE except .data previously grouped .drop = FALSE. See group_by_drop_default() details. x data.frame.","code":""},{"path":"/reference/group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group by one or more variables — group_by","text":"using group_by(), data.frame, grouped grouping variables. using ungroup(), data.frame.","code":""},{"path":"/reference/group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by","text":"","code":"group_by(mtcars, am, cyl) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 ungroup(mutate(group_by(mtcars, am, cyl), sumMpg = sum(mpg))) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb sumMpg #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4   61.7 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4   61.7 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1  224.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1   76.5 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  180.6 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1   76.5 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  180.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2   68.7 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2   68.7 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4   76.5 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4   76.5 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  180.6 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  180.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  180.6 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  180.6 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  180.6 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  180.6 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  224.6 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  224.6 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  224.6 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1   68.7 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  180.6 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  180.6 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  180.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  180.6 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  224.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  224.6 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  224.6 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4   30.8 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6   61.7 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8   30.8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  224.6 mtcars %>%   group_by(am, cyl) %>%   mutate(sumMpg = sum(mpg)) %>%   ungroup() #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb sumMpg #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4   61.7 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4   61.7 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1  224.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1   76.5 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  180.6 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1   76.5 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  180.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2   68.7 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2   68.7 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4   76.5 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4   76.5 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  180.6 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  180.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  180.6 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  180.6 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  180.6 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  180.6 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1  224.6 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  224.6 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1  224.6 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1   68.7 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  180.6 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  180.6 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  180.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  180.6 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  224.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2  224.6 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2  224.6 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4   30.8 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6   61.7 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8   30.8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  224.6 mtcars %>%   group_by(carb) %>%   filter(any(gear == 5)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # You can group by expressions: this is just short-hand for # a mutate() followed by a group_by() mtcars %>% group_by(vsam = vs + am) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb vsam #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4    1 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4    1 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1    2 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2    0 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4    0 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2    1 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4    1 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4    1 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3    0 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3    0 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3    0 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4    0 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4    0 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4    0 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1    2 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2    0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2    0 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4    0 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2    0 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2    1 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4    1 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6    1 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2    2"},{"path":"/reference/group_by_drop_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for .drop argument of group_by — group_by_drop_default","title":"Default value for .drop argument of group_by — group_by_drop_default","text":"Default value .drop argument group_by","code":""},{"path":"/reference/group_by_drop_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for .drop argument of group_by — group_by_drop_default","text":"","code":"group_by_drop_default(.tbl)"},{"path":"/reference/group_by_drop_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for .drop argument of group_by — group_by_drop_default","text":".tbl data.frame.","code":""},{"path":"/reference/group_by_drop_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for .drop argument of group_by — group_by_drop_default","text":"TRUE unless .tbl grouped data.frame previously obtained group_by(.drop = FALSE)","code":""},{"path":"/reference/group_by_drop_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for .drop argument of group_by — group_by_drop_default","text":"","code":"group_by_drop_default(iris) #> [1] TRUE  iris %>%   group_by(Species) %>%   group_by_drop_default() #> [1] TRUE  iris %>%   group_by(Species, .drop = FALSE) %>%   group_by_drop_default() #> [1] FALSE"},{"path":"/reference/group_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Grouping Variables — group_cols","title":"Select Grouping Variables — group_cols","text":"selection helper matches grouping variables. can used within select() relocate() selections.","code":""},{"path":"/reference/group_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Grouping Variables — group_cols","text":"","code":"group_cols()"},{"path":[]},{"path":"/reference/group_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Grouping Variables — group_cols","text":"","code":"mtcars %>% group_by(am, cyl) %>% select(group_cols()) #>                     am cyl #> Mazda RX4            1   6 #> Mazda RX4 Wag        1   6 #> Datsun 710           1   4 #> Hornet 4 Drive       0   6 #> Hornet Sportabout    0   8 #> Valiant              0   6 #> Duster 360           0   8 #> Merc 240D            0   4 #> Merc 230             0   4 #> Merc 280             0   6 #> Merc 280C            0   6 #> Merc 450SE           0   8 #> Merc 450SL           0   8 #> Merc 450SLC          0   8 #> Cadillac Fleetwood   0   8 #> Lincoln Continental  0   8 #> Chrysler Imperial    0   8 #> Fiat 128             1   4 #> Honda Civic          1   4 #> Toyota Corolla       1   4 #> Toyota Corona        0   4 #> Dodge Challenger     0   8 #> AMC Javelin          0   8 #> Camaro Z28           0   8 #> Pontiac Firebird     0   8 #> Fiat X1-9            1   4 #> Porsche 914-2        1   4 #> Lotus Europa         1   4 #> Ford Pantera L       1   8 #> Ferrari Dino         1   6 #> Maserati Bora        1   8 #> Volvo 142E           1   4"},{"path":"/reference/group_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping metadata — group_metadata","title":"Grouping metadata — group_metadata","text":"group_data() returns data frame defines grouping structure. columns give values grouping variables. last column, always called .rows, list integer vectors gives location rows group. group_rows() returns rows group contains. group_indices() returns integer vector length .data gives group row belongs . group_vars() gives names grouping variables character vector. groups() gives names list symbols. group_size() gives size group. n_groups() gives total number groups.","code":""},{"path":"/reference/group_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping metadata — group_metadata","text":"","code":"group_data(.data)  group_rows(.data)  group_indices(.data)  group_vars(x)  groups(x)  group_size(x)  n_groups(x)"},{"path":"/reference/group_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping metadata — group_metadata","text":".data, x data.frame.","code":""},{"path":[]},{"path":"/reference/group_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping metadata — group_metadata","text":"","code":"df <- data.frame(x = c(1,1,2,2)) group_vars(df) #> character(0) group_rows(df) #> [[1]] #> [1] 1 2 3 4 #>  group_data(df) #>        .rows #> 1 1, 2, 3, 4  gf <- group_by(df, x) group_vars(gf) #> [1] \"x\" group_rows(gf) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 #>  group_data(gf) #>   x .rows #> 1 1  1, 2 #> 2 2  3, 4"},{"path":"/reference/group_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data.frame by groups — group_split","title":"Split data.frame by groups — group_split","text":"group_split() works like base::split() uses grouping structure group_by() therefore subject data mask name elements list based grouping typically loses information confusing","code":""},{"path":"/reference/group_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data.frame by groups — group_split","text":"","code":"group_split(.data, ..., .keep = TRUE)  group_keys(.data)"},{"path":"/reference/group_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data.frame by groups — group_split","text":".data data.frame. ... Grouping specification, forwarded group_by(). .keep logical(1). grouping columns kept (default: TRUE)?","code":""},{"path":"/reference/group_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data.frame by groups — group_split","text":"group_split() returns list data.frames. data.frame contains rows .data associated group columns, including grouping variables. group_keys() returns data.frame one row per group, one column per grouping variable","code":""},{"path":"/reference/group_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split data.frame by groups — group_split","text":"Grouped data.frames: primary use case group_split() already groups data.frames, typically result group_by(). case, group_split() uses first argument, grouped data.frame, warns ... used. groups may empty, best paired group_keys() identifies representatives grouping variable group. Ungrouped data.frames: used ungrouped data.frames, group_split() forwards ... group_by() split, therefore ... subject data mask.","code":""},{"path":[]},{"path":"/reference/group_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data.frame by groups — group_split","text":"","code":"# Grouped data.frames: mtcars %>% group_by(cyl, am) %>% group_split() #> [[1]] #>                mpg cyl  disp hp drat    wt  qsec vs am gear carb #> Merc 240D     24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2 #> Merc 230      22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2 #> Toyota Corona 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1 #>  #> [[2]] #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  #> [[3]] #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  #> [[4]] #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> [[5]] #>                mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Ferrari Dino  19.7   6  145 175 3.62 2.770 15.50  0  1    5    6 #>  #> [[6]] #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #>  mtcars %>% group_by(cyl, am) %>% group_split(.keep = FALSE) #> [[1]] #>                mpg  disp hp drat    wt  qsec vs gear carb #> Merc 240D     24.4 146.7 62 3.69 3.190 20.00  1    4    2 #> Merc 230      22.8 140.8 95 3.92 3.150 22.90  1    4    2 #> Toyota Corona 21.5 120.1 97 3.70 2.465 20.01  1    3    1 #>  #> [[2]] #>                 mpg  disp  hp drat    wt  qsec vs gear carb #> Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44  1    3    1 #> Valiant        18.1 225.0 105 2.76 3.460 20.22  1    3    1 #> Merc 280       19.2 167.6 123 3.92 3.440 18.30  1    4    4 #> Merc 280C      17.8 167.6 123 3.92 3.440 18.90  1    4    4 #>  #> [[3]] #>                      mpg  disp  hp drat    wt  qsec vs gear carb #> Hornet Sportabout   18.7 360.0 175 3.15 3.440 17.02  0    3    2 #> Duster 360          14.3 360.0 245 3.21 3.570 15.84  0    3    4 #> Merc 450SE          16.4 275.8 180 3.07 4.070 17.40  0    3    3 #> Merc 450SL          17.3 275.8 180 3.07 3.730 17.60  0    3    3 #> Merc 450SLC         15.2 275.8 180 3.07 3.780 18.00  0    3    3 #> Cadillac Fleetwood  10.4 472.0 205 2.93 5.250 17.98  0    3    4 #> Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4 #> Chrysler Imperial   14.7 440.0 230 3.23 5.345 17.42  0    3    4 #> Dodge Challenger    15.5 318.0 150 2.76 3.520 16.87  0    3    2 #> AMC Javelin         15.2 304.0 150 3.15 3.435 17.30  0    3    2 #> Camaro Z28          13.3 350.0 245 3.73 3.840 15.41  0    3    4 #> Pontiac Firebird    19.2 400.0 175 3.08 3.845 17.05  0    3    2 #>  #> [[4]] #>                 mpg  disp  hp drat    wt  qsec vs gear carb #> Datsun 710     22.8 108.0  93 3.85 2.320 18.61  1    4    1 #> Fiat 128       32.4  78.7  66 4.08 2.200 19.47  1    4    1 #> Honda Civic    30.4  75.7  52 4.93 1.615 18.52  1    4    2 #> Toyota Corolla 33.9  71.1  65 4.22 1.835 19.90  1    4    1 #> Fiat X1-9      27.3  79.0  66 4.08 1.935 18.90  1    4    1 #> Porsche 914-2  26.0 120.3  91 4.43 2.140 16.70  0    5    2 #> Lotus Europa   30.4  95.1 113 3.77 1.513 16.90  1    5    2 #> Volvo 142E     21.4 121.0 109 4.11 2.780 18.60  1    4    2 #>  #> [[5]] #>                mpg disp  hp drat    wt  qsec vs gear carb #> Mazda RX4     21.0  160 110 3.90 2.620 16.46  0    4    4 #> Mazda RX4 Wag 21.0  160 110 3.90 2.875 17.02  0    4    4 #> Ferrari Dino  19.7  145 175 3.62 2.770 15.50  0    5    6 #>  #> [[6]] #>                 mpg disp  hp drat   wt qsec vs gear carb #> Ford Pantera L 15.8  351 264 4.22 3.17 14.5  0    5    4 #> Maserati Bora  15.0  301 335 3.54 3.57 14.6  0    5    8 #>  mtcars %>% group_by(cyl, am) %>% group_keys() #>   cyl am #> 1   4  0 #> 2   4  1 #> 3   6  0 #> 4   6  1 #> 5   8  0 #> 6   8  1  # Ungrouped data.frames: mtcars %>% group_split(am, cyl) #> [[1]] #>                mpg cyl  disp hp drat    wt  qsec vs am gear carb #> Merc 240D     24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2 #> Merc 230      22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2 #> Toyota Corona 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1 #>  #> [[2]] #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> [[3]] #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  #> [[4]] #>                mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Ferrari Dino  19.7   6  145 175 3.62 2.770 15.50  0  1    5    6 #>  #> [[5]] #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  #> [[6]] #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #>"},{"path":"/reference/if_else.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised if — if_else","title":"Vectorised if — if_else","text":"wrapper around ifelse() checks true false type, making output predictable.","code":""},{"path":"/reference/if_else.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised if — if_else","text":"","code":"if_else(condition, true, false, missing = NULL)"},{"path":"/reference/if_else.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised if — if_else","text":"condition logical(n) vector. true, false Values use TRUE FALSE condition. must either length condition length 1. must also type. missing NULL (default), replace missing values.","code":""},{"path":"/reference/if_else.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised if — if_else","text":"vector length condition values TRUE FALSE replaced specified true false, respectively.","code":""},{"path":"/reference/if_else.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised if — if_else","text":"","code":"x <- c(-5:5, NA) if_else(x < 0, NA_integer_, x) #>  [1] NA NA NA NA NA  0  1  2  3  4  5 NA if_else(x < 0, \"negative\", \"positive\", \"missing\") #>  [1] \"negative\" \"negative\" \"negative\" \"negative\" \"negative\" \"positive\" #>  [7] \"positive\" \"positive\" \"positive\" \"positive\" \"positive\" \"missing\"   # Unlike ifelse, if_else preserves types x <- factor(sample(letters[1:5], 10, replace = TRUE)) ifelse(x %in% c(\"a\", \"b\", \"c\"), x, factor(NA)) #>  [1]  1 NA NA NA  2  1 NA  1 NA NA # Attributes are taken from the `true` vector if_else(x %in% c(\"a\", \"b\", \"c\"), x, factor(NA)) #>  [1] b    <NA> <NA> <NA> c    b    <NA> b    <NA> <NA> #> Levels: b c d e"},{"path":"/reference/lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute lagged or leading values — lag","title":"Compute lagged or leading values — lag","text":"Find \"previous\" (lag()) \"next\" (lead()) values vector. Useful comparing values behind ahead current values.","code":""},{"path":"/reference/lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute lagged or leading values — lag","text":"","code":"lag(x, n = 1L, default = NA)  lead(x, n = 1L, default = NA)"},{"path":"/reference/lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute lagged or leading values — lag","text":"x vector values n positive integer(1), giving number positions lead lag . default value used non-existent rows (default: NA).","code":""},{"path":"/reference/lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute lagged or leading values — lag","text":"","code":"lag(1:5) #> [1] NA  1  2  3  4 lead(1:5) #> [1]  2  3  4  5 NA  x <- 1:5 data.frame(behind = lag(x), x, ahead = lead(x)) #>   behind x ahead #> 1     NA 1     2 #> 2      1 2     3 #> 3      2 3     4 #> 4      3 4     5 #> 5      4 5    NA  # If you want to look more rows behind or ahead, use `n` lag(1:5, n = 1) #> [1] NA  1  2  3  4 lag(1:5, n = 2) #> [1] NA NA  1  2  3  lead(1:5, n = 1) #> [1]  2  3  4  5 NA lead(1:5, n = 2) #> [1]  3  4  5 NA NA  # If you want to define a value for non-existing rows, use `default` lag(1:5) #> [1] NA  1  2  3  4 lag(1:5, default = 0) #> [1] 0 1 2 3 4  lead(1:5) #> [1]  2  3  4  5 NA lead(1:5, default = 6) #> [1] 2 3 4 5 6"},{"path":"/reference/lst.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a list — lst","title":"Build a list — lst","text":"lst() constructs list, similar base::list(), components built sequentially. defining component, can refer components created earlier call. lst() also generates missing names automatically.","code":""},{"path":"/reference/lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a list — lst","text":"","code":"lst(...)"},{"path":"/reference/lst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a list — lst","text":"... Named unnamed elements list. element unnamed, expression used name.","code":""},{"path":"/reference/lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a list — lst","text":"named list.","code":""},{"path":"/reference/lst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a list — lst","text":"","code":"# the value of n can be used immediately in the definition of x lst(n = 5, x = runif(n)) #> $n #> [1] 5 #>  #> $x #> [1] 0.8184397 0.6770606 0.5080278 0.4134652 0.2273141 #>   # missing names are constructed from user's input lst(1:3, z = letters[4:6], runif(3)) #> $`1:3` #> [1] 1 2 3 #>  #> $z #> [1] \"d\" \"e\" \"f\" #>  #> $`runif(3)` #> [1] 0.9708845 0.8488990 0.2712538 #>   a <- 1:3 b <- letters[4:6] lst(a, b) #> Error in eval(value, envir = if (length(out) == 0) {    list_to_eval} else {    drop_dup_list(out[1:(element - 1)])}): object 'a' not found"},{"path":"/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or transform variables — mutate","title":"Create or transform variables — mutate","text":"mutate() adds new variables preserves existing ones; transmute() adds new variables drops existing ones. functions preserve number rows input. New variables overwrite existing variables name. Variables can removed setting value NULL.","code":""},{"path":"/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or transform variables — mutate","text":"","code":"mutate(.data, ...)  # S3 method for data.frame mutate(   .data,   ...,   .keep = c(\"all\", \"used\", \"unused\", \"none\"),   .before = NULL,   .after = NULL )  transmute(.data, ...)"},{"path":"/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or transform variables — mutate","text":".data data.frame. ... Name-value pairs expressions, length 1L. name argument name new column value corresponding value. Use NULL value mutate drop variable. New variables overwrite existing variables name. .keep argument allows control columns .data retained output: \"\", default, retains variables. \"used\" keeps variables used make new variables; useful checking work displays inputs outputs side--side. \"unused\" keeps existing variables used make new variables. \"none\", keeps grouping keys (like transmute()). Grouping variables always kept, unconditional .keep. ., .<poor-select> Optionally, control new columns appear (default add right hand side). See relocate() details.","code":""},{"path":"/reference/mutate.html","id":"useful-mutate-functions","dir":"Reference","previous_headings":"","what":"Useful mutate functions","title":"Create or transform variables — mutate","text":"+, -, log(), etc., usual mathematical meanings lead(), lag() dense_rank(), min_rank(), percent_rank(), row_number(), cume_dist(), ntile() cumsum(), cummin(), cummax() na_if(), coalesce() if_else(), recode(), case_when()","code":""},{"path":"/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or transform variables — mutate","text":"","code":"mutate(mtcars, mpg2 = mpg * 2) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpg2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 42.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 42.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 45.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 42.8 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 37.4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 36.2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 28.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 48.8 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 45.6 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 38.4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 35.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 32.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 34.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 30.4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 20.8 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 20.8 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 29.4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 64.8 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 60.8 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 67.8 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 43.0 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 31.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 30.4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 26.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 38.4 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 54.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 52.0 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 60.8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 31.6 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 39.4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 30.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 42.8 mtcars %>% mutate(mpg2 = mpg * 2) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpg2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 42.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 42.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 45.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 42.8 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 37.4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 36.2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 28.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 48.8 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 45.6 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 38.4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 35.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 32.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 34.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 30.4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 20.8 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 20.8 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 29.4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 64.8 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 60.8 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 67.8 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 43.0 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 31.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 30.4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 26.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 38.4 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 54.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 52.0 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 60.8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 31.6 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 39.4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 30.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 42.8 mtcars %>% mutate(mpg2 = mpg * 2, cyl2 = cyl * 2) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpg2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 42.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 42.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 45.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 42.8 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 37.4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 36.2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 28.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 48.8 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 45.6 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 38.4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 35.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 32.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 34.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 30.4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 20.8 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 20.8 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 29.4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 64.8 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 60.8 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 67.8 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 43.0 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 31.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 30.4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 26.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 38.4 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 54.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 52.0 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 60.8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 31.6 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 39.4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 30.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 42.8 #>                     cyl2 #> Mazda RX4             12 #> Mazda RX4 Wag         12 #> Datsun 710             8 #> Hornet 4 Drive        12 #> Hornet Sportabout     16 #> Valiant               12 #> Duster 360            16 #> Merc 240D              8 #> Merc 230               8 #> Merc 280              12 #> Merc 280C             12 #> Merc 450SE            16 #> Merc 450SL            16 #> Merc 450SLC           16 #> Cadillac Fleetwood    16 #> Lincoln Continental   16 #> Chrysler Imperial     16 #> Fiat 128               8 #> Honda Civic            8 #> Toyota Corolla         8 #> Toyota Corona          8 #> Dodge Challenger      16 #> AMC Javelin           16 #> Camaro Z28            16 #> Pontiac Firebird      16 #> Fiat X1-9              8 #> Porsche 914-2          8 #> Lotus Europa           8 #> Ford Pantera L        16 #> Ferrari Dino          12 #> Maserati Bora         16 #> Volvo 142E             8  # Newly created variables are available immediately mtcars %>% mutate(mpg2 = mpg * 2, mpg4 = mpg2 * 2) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpg2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 42.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 42.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 45.6 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 42.8 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 37.4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 36.2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 28.6 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 48.8 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 45.6 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 38.4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 35.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 32.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 34.6 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 30.4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 20.8 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 20.8 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 29.4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 64.8 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 60.8 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 67.8 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 43.0 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 31.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 30.4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 26.6 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 38.4 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 54.6 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 52.0 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 60.8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 31.6 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 39.4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 30.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 42.8 #>                      mpg4 #> Mazda RX4            84.0 #> Mazda RX4 Wag        84.0 #> Datsun 710           91.2 #> Hornet 4 Drive       85.6 #> Hornet Sportabout    74.8 #> Valiant              72.4 #> Duster 360           57.2 #> Merc 240D            97.6 #> Merc 230             91.2 #> Merc 280             76.8 #> Merc 280C            71.2 #> Merc 450SE           65.6 #> Merc 450SL           69.2 #> Merc 450SLC          60.8 #> Cadillac Fleetwood   41.6 #> Lincoln Continental  41.6 #> Chrysler Imperial    58.8 #> Fiat 128            129.6 #> Honda Civic         121.6 #> Toyota Corolla      135.6 #> Toyota Corona        86.0 #> Dodge Challenger     62.0 #> AMC Javelin          60.8 #> Camaro Z28           53.2 #> Pontiac Firebird     76.8 #> Fiat X1-9           109.2 #> Porsche 914-2       104.0 #> Lotus Europa        121.6 #> Ford Pantera L       63.2 #> Ferrari Dino         78.8 #> Maserati Bora        60.0 #> Volvo 142E           85.6  # You can also use mutate() to remove variables and modify existing variables mtcars %>% mutate(   mpg = NULL,   disp = disp * 0.0163871 # convert to litres ) #>                     cyl     disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4             6 2.621936 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag         6 2.621936 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710            4 1.769807  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive        6 4.227872 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout     8 5.899356 175 3.15 3.440 17.02  0  0    3    2 #> Valiant               6 3.687098 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360            8 5.899356 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D             4 2.403988  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230              4 2.307304  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280              6 2.746478 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C             6 2.746478 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE            8 4.519562 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL            8 4.519562 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC           8 4.519562 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood    8 7.734711 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental   8 7.538066 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial     8 7.210324 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128              4 1.289665  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic           4 1.240503  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla        4 1.165123  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona         4 1.968091  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger      8 5.211098 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin           8 4.981678 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28            8 5.735485 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird      8 6.554840 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9             4 1.294581  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2         4 1.971368  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa          4 1.558413 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L        8 5.751872 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino          6 2.376130 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora         8 4.932517 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E            4 1.982839 109 4.11 2.780 18.60  1  1    4    2  # By default, new columns are placed on the far right. # You can override this with `.before` or `.after`. df <- data.frame(x = 1, y = 2) df %>% mutate(z = x + y) #>   x y z #> 1 1 2 3 df %>% mutate(z = x + y, .before = 1) #>   z x y #> 1 3 1 2 df %>% mutate(z = x + y, .after = x) #>   x z y #> 1 1 3 2  # By default, mutate() keeps all columns from the input data. # You can override with `.keep` df <- data.frame(   x = 1, y = 2, a = \"a\", b = \"b\",   stringsAsFactors = FALSE ) df %>% mutate(z = x + y, .keep = \"all\") # the default #>   x y a b z #> 1 1 2 a b 3 df %>% mutate(z = x + y, .keep = \"used\") #>   x y z #> 1 1 2 3 df %>% mutate(z = x + y, .keep = \"unused\") #>   a b z #> 1 a b 3 df %>% mutate(z = x + y, .keep = \"none\") # same as transmute() #>   z #> 1 3  # mutate() vs transmute -------------------------- # mutate() keeps all existing variables mtcars %>%   mutate(displ_l = disp / 61.0237) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>                      displ_l #> Mazda RX4           2.621932 #> Mazda RX4 Wag       2.621932 #> Datsun 710          1.769804 #> Hornet 4 Drive      4.227866 #> Hornet Sportabout   5.899347 #> Valiant             3.687092 #> Duster 360          5.899347 #> Merc 240D           2.403984 #> Merc 230            2.307300 #> Merc 280            2.746474 #> Merc 280C           2.746474 #> Merc 450SE          4.519556 #> Merc 450SL          4.519556 #> Merc 450SLC         4.519556 #> Cadillac Fleetwood  7.734700 #> Lincoln Continental 7.538055 #> Chrysler Imperial   7.210313 #> Fiat 128            1.289663 #> Honda Civic         1.240502 #> Toyota Corolla      1.165121 #> Toyota Corona       1.968088 #> Dodge Challenger    5.211090 #> AMC Javelin         4.981671 #> Camaro Z28          5.735477 #> Pontiac Firebird    6.554830 #> Fiat X1-9           1.294579 #> Porsche 914-2       1.971365 #> Lotus Europa        1.558411 #> Ford Pantera L      5.751864 #> Ferrari Dino        2.376126 #> Maserati Bora       4.932510 #> Volvo 142E          1.982836  # transmute keeps only the variables you create mtcars %>%   transmute(displ_l = disp / 61.0237) #>                      displ_l #> Mazda RX4           2.621932 #> Mazda RX4 Wag       2.621932 #> Datsun 710          1.769804 #> Hornet 4 Drive      4.227866 #> Hornet Sportabout   5.899347 #> Valiant             3.687092 #> Duster 360          5.899347 #> Merc 240D           2.403984 #> Merc 230            2.307300 #> Merc 280            2.746474 #> Merc 280C           2.746474 #> Merc 450SE          4.519556 #> Merc 450SL          4.519556 #> Merc 450SLC         4.519556 #> Cadillac Fleetwood  7.734700 #> Lincoln Continental 7.538055 #> Chrysler Imperial   7.210313 #> Fiat 128            1.289663 #> Honda Civic         1.240502 #> Toyota Corolla      1.165121 #> Toyota Corona       1.968088 #> Dodge Challenger    5.211090 #> AMC Javelin         4.981671 #> Camaro Z28          5.735477 #> Pontiac Firebird    6.554830 #> Fiat X1-9           1.294579 #> Porsche 914-2       1.971365 #> Lotus Europa        1.558411 #> Ford Pantera L      5.751864 #> Ferrari Dino        2.376126 #> Maserati Bora       4.932510 #> Volvo 142E          1.982836"},{"path":"/reference/mutate_joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating Joins — mutate_joins","title":"Mutating Joins — mutate_joins","text":"mutating joins add columns y x, matching rows based keys: inner_join(): includes rows x y. left_join(): includes rows x. right_join(): includes rows y. full_join(): includes rows x y. row x matches multiple rows y, rows y returned matching row x.","code":""},{"path":"/reference/mutate_joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating Joins — mutate_joins","text":"","code":"inner_join(   x,   y,   by = NULL,   suffix = c(\".x\", \".y\"),   ...,   na_matches = c(\"na\", \"never\") )  left_join(   x,   y,   by = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE,   na_matches = c(\"na\", \"never\") )  right_join(   x,   y,   by = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE,   na_matches = c(\"na\", \"never\") )  full_join(   x,   y,   by = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE,   na_matches = c(\"na\", \"never\") )"},{"path":"/reference/mutate_joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating Joins — mutate_joins","text":"x, y data.frames join. character vector variables join . NULL, default, *_join() natural join, using variables common names across two tables. message lists variables can check right (suppress message, simply explicitly list variables want join). join different variables x y use named vector. example, = c(\"\" = \"b\") match x.y.b. join multiple variables, use vector length > 1. example, = c(\"\", \"b\") match x$y$x$b y$b. Use named vector match different variables x y. example, = c(\"\" = \"b\", \"c\" = \"d\") match x$y$b x$c y$d. perform cross-join, generating combinations x y, use = character(). suffix character(2). non-joined duplicate variables x y, suffixes added output disambiguate . ... Additional arguments pass merge() na_matches NA NaN values match one another? default, \"na\", treats two NA NaN values equal, like %%, match(), merge(). Use \"never\" always treat two NA NaN values different, like joins database sources, similarly merge(incomparables = FALSE). keep logical(1). join keys x y preserved output? applies left_join(), right_join(), full_join().","code":""},{"path":"/reference/mutate_joins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating Joins — mutate_joins","text":"data.frame. order rows columns x preserved much possible. output following properties: inner_join(), subset x rows. left_join(), x rows. right_join(), subset x rows, followed unmatched y rows. full_join(), x rows, followed unmatched y rows. joins, rows duplicated one rows x matches multiple rows y. Output columns include x columns y columns. columns x y name (included ), suffixes added disambiguate. Output columns included coerced common type across x y. Groups taken x.","code":""},{"path":"/reference/mutate_joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating Joins — mutate_joins","text":"","code":"# If a row in `x` matches multiple rows in `y`, all the rows in `y` will be # returned once for each matching row in `x` df1 <- data.frame(x = 1:3) df2 <- data.frame(x = c(1, 1, 2), y = c(\"first\", \"second\", \"third\")) df1 %>% left_join(df2) #> Joining, by = \"x\" #>   x      y #> 1 1  first #> 2 1 second #> 3 2  third #> 4 3   <NA>  # By default, NAs match other NAs so that there are two # rows in the output of this join: df1 <- data.frame(x = c(1, NA), y = 2) df2 <- data.frame(x = c(1, NA), z = 3) left_join(df1, df2) #> Joining, by = \"x\" #>    x y z #> 1  1 2 3 #> 2 NA 2 3  # You can optionally request that NAs don't match, giving a # a result that more closely resembles SQL joins left_join(df1, df2, na_matches = \"never\") #> Joining, by = \"x\" #>    x y  z #> 1  1 2  3 #> 2 NA 2 NA"},{"path":"/reference/n_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of unique values in a set of vectors — n_distinct","title":"Count the number of unique values in a set of vectors — n_distinct","text":"equivalent length(unique(x)) multiple vectors.","code":""},{"path":"/reference/n_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of unique values in a set of vectors — n_distinct","text":"","code":"n_distinct(..., na.rm = FALSE)"},{"path":"/reference/n_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of unique values in a set of vectors — n_distinct","text":"... Vectors values. na.rm logical(1). TRUE missing values count.","code":""},{"path":"/reference/n_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of unique values in a set of vectors — n_distinct","text":"","code":"x <- sample(1:10, 1e5, rep = TRUE) length(unique(x)) #> [1] 10 n_distinct(x) #> [1] 10"},{"path":"/reference/na_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values to NA — na_if","title":"Convert values to NA — na_if","text":"translation SQL command NULLIF. useful want convert annoying value NA.","code":""},{"path":"/reference/na_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values to NA — na_if","text":"","code":"na_if(x, y)"},{"path":"/reference/na_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values to NA — na_if","text":"x vector modify. y value replace NA.","code":""},{"path":"/reference/na_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert values to NA — na_if","text":"modified version x replaces values equal y NA.","code":""},{"path":[]},{"path":"/reference/na_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert values to NA — na_if","text":"","code":"na_if(1:5, 5:1) #> [1]  1  2 NA  4  5  x <- c(1, -1, 0, 10) 100 / x #> [1]  100 -100  Inf   10 100 / na_if(x, 0) #> [1]  100 -100   NA   10  y <- c(\"abc\", \"def\", \"\", \"ghi\") na_if(y, \"\") #> [1] \"abc\" \"def\" NA    \"ghi\"  # na_if() is particularly useful inside mutate(), # and is meant for use with vectors rather than entire data.frames mtcars %>%   mutate(cyl = na_if(cyl, 6)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0  NA 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0  NA 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4  NA 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1  NA 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2  NA 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8  NA 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7  NA 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"/reference/near.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two numeric vectors — near","title":"Compare two numeric vectors — near","text":"safe way comparing two vectors floating point numbers (pairwise) equal.  safer using ==, built tolerance.","code":""},{"path":"/reference/near.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two numeric vectors — near","text":"","code":"near(x, y, tol = .Machine$double.eps^0.5)"},{"path":"/reference/near.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two numeric vectors — near","text":"x, y Numeric vectors compare tol Tolerance comparison.","code":""},{"path":"/reference/near.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two numeric vectors — near","text":"","code":"sqrt(2) ^ 2 == 2 #> [1] FALSE near(sqrt(2) ^ 2, 2) #> [1] TRUE"},{"path":"/reference/nest_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest By — nest_by","title":"Nest By — nest_by","text":"nest_by() similar group_by() however instead storing group structure metadata, made explicit data. group key given single row within data.frame group's data stored within list-column data.frame.","code":""},{"path":"/reference/nest_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest By — nest_by","text":"","code":"nest_by(.data, ..., .key = \"data\", .keep = FALSE)"},{"path":"/reference/nest_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest By — nest_by","text":".data data.frame. ... Grouping specification, forwarded group_by(). .key character(1). name column nest data (default: \"data\"). .keep logical(1). grouping columns kept (default: TRUE)?","code":""},{"path":"/reference/nest_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest By — nest_by","text":"Currently pretty-printing provided results nest_by() useable functions mutate().","code":""},{"path":"/reference/nest_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest By — nest_by","text":"","code":"mtcars %>% nest_by(am, cyl) #>   cyl am #> 1   4  0 #> 2   6  0 #> 3   8  0 #> 4   4  1 #> 5   6  1 #> 6   8  1 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         datar equivalently mtcars %>% group_by(am, cyl) %>% nest_by() #>   cyl am #> 1   4  0 #> 2   6  0 #> 3   8  0 #> 4   4  1 #> 5   6  1 #> 6   8  1 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         data},{"path":"/reference/nth.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the first, last or nth value from a vector — nth","title":"Extract the first, last or nth value from a vector — nth","text":"straightforward wrappers around [[. main advantage can provide optional secondary vector defines ordering, provide default value use input shorter expected.","code":""},{"path":"/reference/nth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the first, last or nth value from a vector — nth","text":"","code":"nth(x, n, order_by = NULL, default = default_missing(x))  first(x, order_by = NULL, default = default_missing(x))  last(x, order_by = NULL, default = default_missing(x))"},{"path":"/reference/nth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the first, last or nth value from a vector — nth","text":"x vector n nth(), single integer specifying position. Negative integers index end (.e. -1L return last value vector). double supplied, silently truncated. order_by optional vector used determine order default default value use position exist input. guessed default base vectors, missing value appropriate type returned, lists, NULL return. complicated objects, need supply value. Make sure type x.","code":""},{"path":"/reference/nth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the first, last or nth value from a vector — nth","text":"single value. [[ used subsetting.","code":""},{"path":"/reference/nth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the first, last or nth value from a vector — nth","text":"","code":"x <- 1:10 y <- 10:1  first(x) #> [1] 1 last(y) #> [1] 1  nth(x, 1) #> [1] 1 nth(x, 5) #> [1] 5 nth(x, -2) #> [1] 9 nth(x, 11) #> [1] NA  last(x) #> [1] 10 # Second argument provides optional ordering last(x, y) #> [1] 1  # These functions always return a single value first(integer()) #> [1] NA"},{"path":"/reference/peek_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek at variables in the selection context — peek_vars","title":"Peek at variables in the selection context — peek_vars","text":"Return vector column names data currently available selection.","code":""},{"path":"/reference/peek_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek at variables in the selection context — peek_vars","text":"","code":"peek_vars()"},{"path":"/reference/peek_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek at variables in the selection context — peek_vars","text":"vector column names.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-pipe operator — pipe","title":"Forward-pipe operator — pipe","text":"Pipe object forward function call expression.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-pipe operator — pipe","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-pipe operator — pipe","text":"lhs result piping. rhs piping result .","code":""},{"path":"/reference/pipe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forward-pipe operator — pipe","text":"Nathan Eastwood Antoine Fabri antoine.fabri@gmail.com.","code":""},{"path":"/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-pipe operator — pipe","text":"","code":"# Basic use: iris %>% head #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Use with lhs as first argument iris %>% head(10) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa  # Using the dot place-holder \"Ceci n'est pas une pipe\" %>% gsub(\"une\", \"un\", .) #> [1] \"Ceci n'est pas un pipe\"  # When dot is nested, lhs is still placed first: sample(1:10) %>% paste0(LETTERS[.]) #>  [1] \"3C\"  \"5E\"  \"1A\"  \"7G\"  \"6F\"  \"2B\"  \"8H\"  \"9I\"  \"10J\" \"4D\"   # This can be avoided: rnorm(100) %>% {c(min(.), mean(.), max(.))} %>% floor #> [1] -3  0  2  # Lambda expressions: iris %>%   {     size <- sample(1:10, size = 1)     rbind(head(., size), tail(., size))   } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 150          5.9         3.0          5.1         1.8 virginica  # renaming in lambdas: iris %>%   {     my_data <- .     size <- sample(1:10, size = 1)     rbind(head(my_data, size), tail(my_data, size))   } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 2            4.9         3.0          1.4         0.2    setosa #> 3            4.7         3.2          1.3         0.2    setosa #> 4            4.6         3.1          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 6            5.4         3.9          1.7         0.4    setosa #> 145          6.7         3.3          5.7         2.5 virginica #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica"},{"path":"/reference/pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from wide to long — pivot_longer","title":"Pivot data from wide to long — pivot_longer","text":"pivot_longer() \"lengthens\" data, increasing number rows decreasing number columns. inverse transformation pivot_wider().","code":""},{"path":"/reference/pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data from wide to long — pivot_longer","text":"","code":"pivot_longer(   data,   cols,   names_to = \"name\",   names_prefix = NULL,   names_sep = NULL,   names_pattern = NULL,   values_to = \"value\",   values_drop_na = FALSE,   ... )"},{"path":"/reference/pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data from wide to long — pivot_longer","text":"data data.frame. data pivot. cols <poor-select>. Columns pivot longer format. names_to character(n). name new column(s) contain column names. names_prefix character(1). regular expression used remove matching text start variable name. names_sep, names_pattern character(1). names_to contains multiple values, argument controls column name broken . names_pattern takes regular expression containing matching groups (()). values_to character(n). name new column(s) contain values pivoted variables. values_drop_na logical(1). TRUE, drop rows contain NA values_to column. effectively converts explicit missing values implicit missing values, generally used missing values data created structure. ... Additional arguments passed methods.","code":""},{"path":"/reference/pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot data from wide to long — pivot_longer","text":"data.frame.","code":""},{"path":"/reference/pivot_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot data from wide to long — pivot_longer","text":"","code":"wide_data <- data.frame(replicate(5, rnorm(10))) # Customizing the names pivot_longer(   data = wide_data,   cols = c(1, 2),   names_to = \"Column\",   values_to = \"Numbers\" ) #>            X3         X4          X5 Column     Numbers #> 1   1.6734479  0.2770119  1.77204192     X1 -1.33104949 #> 2   1.6734479  0.2770119  1.77204192     X2 -1.15477558 #> 3   0.8620044 -0.9063744 -0.06912362     X1  2.07353236 #> 4   0.8620044 -0.9063744 -0.06912362     X2  1.26495958 #> 5  -0.4090102  0.9613471 -0.17325818     X1  1.54275294 #> 6  -0.4090102  0.9613471 -0.17325818     X2  0.01139603 #> 7   0.9659927 -1.5767528 -0.45741530     X1 -1.23213459 #> 8   0.9659927 -1.5767528 -0.45741530     X2  0.42347340 #> 9   0.4936819  0.5219768  0.18809465     X1 -0.43293566 #> 10  0.4936819  0.5219768  0.18809465     X2  1.11985344 #> 11 -0.9858090 -1.5301141  0.66104702     X1 -1.91147262 #> 12 -0.9858090 -1.5301141  0.66104702     X2 -0.47864076 #> 13  0.4293605 -0.5184022 -0.45087924     X1  1.30774394 #> 14  0.4293605 -0.5184022 -0.45087924     X2  1.39712825 #> 15 -0.6240340 -0.6129894  0.17012756     X1 -1.32864036 #> 16 -0.6240340 -0.6129894  0.17012756     X2  1.25200612 #> 17 -1.9551294 -2.7450434  0.46578268     X1  0.59697394 #> 18 -1.9551294 -2.7450434  0.46578268     X2 -0.95583090 #> 19  0.7910036 -0.4539674  1.29311883     X1 -0.88702130 #> 20  0.7910036 -0.4539674  1.29311883     X2 -0.52904007"},{"path":"/reference/pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from long to wide — pivot_wider","title":"Pivot data from long to wide — pivot_wider","text":"pivot_wider() \"widens\" data, increasing number columns decreasing number rows. inverse transformation pivot_longer().","code":""},{"path":"/reference/pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data from long to wide — pivot_wider","text":"","code":"pivot_wider(   data,   id_cols = NULL,   values_from = \"Value\",   names_from = \"Name\",   names_sep = \"_\",   names_prefix = \"\",   names_glue = NULL,   values_fill = NULL,   ... )"},{"path":"/reference/pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data from long to wide — pivot_wider","text":"data data.frame. data pivot. id_cols character(1). name column identifies rows. NULL, use unique rows. values_from character(n). name column contains values used future variable values. names_from character(n). name column(s) contains levels used future column names. names_sep character(1). names_from values_from contains multiple variables, used join values together single string use column name. names_prefix character(1). String added start every variable name. particularly useful names_from numeric vector want create syntactic variable names. names_glue character(1). Instead names_sep names_prefix, can supply glue specification uses names_from columns create custom column names. Note delimiters supported names_glue curly brackets, { }. values_fill numeric(n). Optionally, (scalar) value used replace missing values new columns created. ... used now.","code":""},{"path":"/reference/pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot data from long to wide — pivot_wider","text":"tibble provided input, pivot_wider() also returns tibble. Otherwise, returns data frame.","code":""},{"path":"/reference/pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot data from long to wide — pivot_wider","text":"","code":"data_long <- read.table(header = TRUE, text = \"  subject sex condition measurement        1   M   control         7.9        1   M     cond1        12.3        1   M     cond2        10.7        2   F   control         6.3        2   F     cond1        10.6        2   F     cond2        11.1        3   F   control         9.5        3   F     cond1        13.1        3   F     cond2        13.8        4   M   control        11.5        4   M     cond1        13.4        4   M     cond2        12.9\")   pivot_wider(   data_long,   id_cols = \"subject\",   names_from = \"condition\",   values_from = \"measurement\" ) #>   subject sex control cond1 cond2 #> 1       1   M     7.9  12.3  10.7 #> 2       2   F     6.3  10.6  11.1 #> 3       3   F     9.5  13.1  13.8 #> 4       4   M    11.5  13.4  12.9  pivot_wider(   data_long,   id_cols = \"subject\",   names_from = \"condition\",   values_from = \"measurement\",   names_prefix = \"Var.\",   names_sep = \".\" ) #>   subject sex Var.control Var.cond1 Var.cond2 #> 1       1   M         7.9      12.3      10.7 #> 2       2   F         6.3      10.6      11.1 #> 3       3   F         9.5      13.1      13.8 #> 4       4   M        11.5      13.4      12.9  production <- expand.grid(   product = c(\"A\", \"B\"),   country = c(\"AI\", \"EI\"),   year = 2000:2014 ) %>%   filter((product == \"A\" & country == \"AI\") | product == \"B\") %>%   mutate(production = rnorm(nrow(.)))  pivot_wider(   production,   names_from = c(\"product\", \"country\"),   values_from = \"production\",   names_glue = \"prod_{product}_{country}\" ) #>    year  prod_A_AI   prod_B_AI   prod_B_EI #> 1  2000  0.3345352 -0.73027197  0.87255108 #> 2  2001  1.4271601 -1.56359837  1.57166658 #> 3  2002 -0.3489315  0.15536364 -0.63575960 #> 4  2003 -1.0590142  0.59222090  0.35796322 #> 5  2004  1.6237517  0.30004598 -0.13957248 #> 6  2005 -0.1175501  0.74269467 -0.51048344 #> 7  2006 -0.6410748 -0.10235246 -1.50056977 #> 8  2007 -1.4741231 -1.22158164 -0.47558515 #> 9  2008  0.7824835  0.05602834 -0.55553651 #> 10 2009 -0.3624190 -1.56867921  0.05341345 #> 11 2010 -0.6157060 -1.54350380 -1.67220452 #> 12 2011 -0.8030609 -0.56407035  0.76355658 #> 13 2012  0.1319857  0.51119197  2.57871539 #> 14 2013  0.2838142 -0.95757930 -1.32314308 #> 15 2014 -0.8115015 -0.78261787 -1.02578285"},{"path":"/reference/poorman.html","id":null,"dir":"Reference","previous_headings":"","what":"poorman: A Poor Man's Dependency Free Recreation of 'dplyr' — poorman","title":"poorman: A Poor Man's Dependency Free Recreation of 'dplyr' — poorman","text":"replication key functionality 'dplyr' wider 'tidyverse' using 'base'.","code":""},{"path":[]},{"path":"/reference/poorman.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"poorman: A Poor Man's Dependency Free Recreation of 'dplyr' — poorman","text":"Maintainer: Nathan Eastwood nathan.eastwood@icloud.com contributors: Etienne Bacher etienne.bacher@protonmail.com (ORCID) [contributor]","code":""},{"path":"/reference/pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull out a single variable — pull","title":"Pull out a single variable — pull","text":"direct replacement [[.data.frame.","code":""},{"path":"/reference/pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull out a single variable — pull","text":"","code":"pull(.data, var = -1)"},{"path":"/reference/pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull out a single variable — pull","text":".data data.frame. var variable specified : literal variable name positive integer, giving position counting left negative integer, giving position counting right default returns last column (assumption column created recently).","code":""},{"path":"/reference/pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull out a single variable — pull","text":"","code":"mtcars %>% pull(-1) #>  [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 mtcars %>% pull(1) #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 mtcars %>% pull(cyl) #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 mtcars %>% pull(\"cyl\") #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4"},{"path":"/reference/recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode values — recode","title":"Recode values — recode","text":"vectorised version switch(): can replace numeric values based position name, character factor values name. S3 generic: {poorman} provides methods numeric,  character, factors. logical vectors, use if_else(). complicated criteria, use case_when(). can use recode() directly factors; preserve existing order levels changing values. Alternatively, can use recode_factor(), change order levels match order replacements. direct port dplyr::recode() function.","code":""},{"path":"/reference/recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode values — recode","text":"","code":"recode(.x, ..., .default = NULL, .missing = NULL)  recode_factor(.x, ..., .default = NULL, .missing = NULL, .ordered = FALSE)"},{"path":"/reference/recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode values — recode","text":".x vector modify ... Replacements. character factor .x, named replacement based name. numeric .x, can named . named, replacement done based position .e. .x represents positions look replacements. See examples. named, argument names current values replaced, argument values new (replacement) values. replacements must type, must either length one length .x. .default supplied, values otherwise matched given value. supplied replacements type original values .x, unmatched values changed. supplied replacements compatible, unmatched values replaced NA. .default must either length 1 length .x. .missing supplied, missing values .x replaced value. Must either length 1 length .x. .ordered logical(1). TRUE, recode_factor() creates ordered factor.","code":""},{"path":"/reference/recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode values — recode","text":"vector length .x, type first ..., .default, .missing. recode_factor() returns factor whose levels order .... levels .default .missing come last.","code":""},{"path":[]},{"path":"/reference/recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode values — recode","text":"","code":"# For character values, recode values with named arguments only. Unmatched # values are unchanged. char_vec <- sample(c(\"a\", \"b\", \"c\"), 10, replace = TRUE) recode(char_vec, a = \"Apple\") #>  [1] \"c\"     \"Apple\" \"Apple\" \"Apple\" \"b\"     \"Apple\" \"Apple\" \"c\"     \"b\"     #> [10] \"b\"     recode(char_vec, a = \"Apple\", b = \"Banana\") #>  [1] \"c\"      \"Apple\"  \"Apple\"  \"Apple\"  \"Banana\" \"Apple\"  \"Apple\"  \"c\"      #>  [9] \"Banana\" \"Banana\"  # Use .default as replacement for unmatched values. Note that NA and # replacement values need to be of the same type. recode(char_vec, a = \"Apple\", b = \"Banana\", .default = NA_character_) #>  [1] NA       \"Apple\"  \"Apple\"  \"Apple\"  \"Banana\" \"Apple\"  \"Apple\"  NA       #>  [9] \"Banana\" \"Banana\"  # Throws an error as NA is logical, not character. if (FALSE) { recode(char_vec, a = \"Apple\", b = \"Banana\", .default = NA) }  # For numeric values, named arguments can also be used num_vec <- c(1:4, NA) recode(num_vec, `2` = 20L, `4` = 40L) #> [1]  1 20  3 40 NA  # Or if you don't name the arguments, recode() matches by position. # (Only works for numeric vector) recode(num_vec, \"a\", \"b\", \"c\", \"d\") #> [1] \"a\" \"b\" \"c\" \"d\" NA  # .x (position given) looks in (...), then grabs (... value at position) # so if nothing at position (here 5), it uses .default or NA. recode(c(1, 5, 3), \"a\", \"b\", \"c\", \"d\", .default = \"nothing\") #> [1] \"a\"       \"nothing\" \"c\"        # Note that if the replacements are not compatible with .x, # unmatched values are replaced by NA and a warning is issued. recode(num_vec, `2` = \"b\", `4` = \"d\") #> Warning: Unreplaced values treated as NA as .x is not compatible. Please specify replacements exhaustively or supply .default #> [1] NA  \"b\" NA  \"d\" NA  # use .default to change the replacement value recode(num_vec, \"a\", \"b\", \"c\", .default = \"other\") #> [1] \"a\"     \"b\"     \"c\"     \"other\" NA      # use .missing to replace missing values in .x recode(num_vec, \"a\", \"b\", \"c\", .default = \"other\", .missing = \"missing\") #> [1] \"a\"       \"b\"       \"c\"       \"other\"   \"missing\"  # For factor values, use only named replacements # and supply default with levels() factor_vec <- factor(c(\"a\", \"b\", \"c\")) recode(factor_vec, a = \"Apple\", .default = levels(factor_vec)) #> [1] Apple b     c     #> Levels: Apple b c  # Use recode_factor() to create factors with levels ordered as they # appear in the recode call. The levels in .default and .missing # come last. recode_factor(num_vec, `1` = \"z\", `2` = \"y\", `3` = \"x\") #> Warning: Unreplaced values treated as NA as .x is not compatible. Please specify replacements exhaustively or supply .default #> [1] z    y    x    <NA> <NA> #> Levels: z y x recode_factor(num_vec, `1` = \"z\", `2` = \"y\", `3` = \"x\", .default = \"D\") #> [1] z    y    x    D    <NA> #> Levels: z y x D recode_factor(num_vec, `1` = \"z\", `2` = \"y\", `3` = \"x\", .default = \"D\", .missing = \"M\") #> [1] z y x D M #> Levels: z y x D M  # When the input vector is a compatible vector (character vector or # factor), it is reused as default. recode_factor(letters[1:3], b = \"z\", c = \"y\") #> [1] a z y #> Levels: z y a recode_factor(factor(letters[1:3]), b = \"z\", c = \"y\") #> [1] a z y #> Levels: z y a"},{"path":"/reference/relocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order — relocate","title":"Change column order — relocate","text":"Use relocate() change column positions, using syntax select() make easy move blocks columns .","code":""},{"path":"/reference/relocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order — relocate","text":"","code":"relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"/reference/relocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order — relocate","text":".data data.frame. ... <poor-select> Columns move. ., .<poor-select> Destination columns selected .... Supplying neither move columns left-hand side; specifying result error.","code":""},{"path":"/reference/relocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change column order — relocate","text":"object type .data. output following properties: Rows affected. columns appear output, (usually) different place. Data frame attributes preserved. Groups affected.","code":""},{"path":"/reference/relocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order — relocate","text":"","code":"df <- data.frame(   a = 1, b = 1, c = 1, d = \"a\", e = \"a\", f = \"a\",   stringsAsFactors = FALSE ) df %>% relocate(f) #>   f a b c d e #> 1 a 1 1 1 a a df %>% relocate(a, .after = c) #>   b c a d e f #> 1 1 1 1 a a a df %>% relocate(f, .before = b) #>   a f b c d e #> 1 1 a 1 1 a a df %>% relocate(a, .after = last_col()) #>   b c d e f a #> 1 1 1 a a a 1  # Can also select variables based on their type df %>% relocate(where(is.character)) #>   d e f a b c #> 1 a a a 1 1 1 df %>% relocate(where(is.numeric), .after = last_col()) #>   d e f a b c #> 1 a a a 1 1 1 # Or with any other select helper df %>% relocate(any_of(c(\"a\", \"e\", \"i\", \"o\", \"u\"))) #>   a e b c d f #> 1 1 a 1 1 a a  # When .before or .after refers to multiple variables they will be # moved to be immediately before/after the selected variables. df2 <- data.frame(   a = 1, b = \"a\", c = 1, d = \"a\",   stringsAsFactors = FALSE ) df2 %>% relocate(where(is.numeric), .after = where(is.character)) #>   b d a c #> 1 a a 1 1 df2 %>% relocate(where(is.numeric), .before = where(is.character)) #>   a c b d #> 1 1 1 a a"},{"path":"/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename","title":"Rename columns — rename","text":"rename() changes names individual variables using new_name = old_name syntax. rename_with() renames columns using function.","code":""},{"path":"/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename","text":"","code":"rename(.data, ...)  rename_with(.data, .fn, .cols = everything(), ...)"},{"path":"/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename","text":".data data.frame ... rename(): comma separated key-value pairs form new_name = old_name rename selected variables. rename_with(): additional arguments passed onto .fn. .fn function() used transform selected .cols. return character vector length input. .cols Columns rename; defaults columns.","code":""},{"path":"/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns — rename","text":"data.frame following properties: Rows affected. Column names changed; column order preserved. data.frame attributes preserved. Groups updated reflect new names.","code":""},{"path":"/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename","text":"","code":"rename(mtcars, MilesPerGallon = mpg) #>                     MilesPerGallon cyl  disp  hp drat    wt  qsec vs am gear #> Mazda RX4                     21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag                 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Datsun 710                    22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Hornet 4 Drive                21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Hornet Sportabout             18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Valiant                       18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Duster 360                    14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Merc 240D                     24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Merc 230                      22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 280                      19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C                     17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Merc 450SE                    16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL                    17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC                   15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Cadillac Fleetwood            10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental           10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial             14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Fiat 128                      32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic                   30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla                33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Toyota Corona                 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Dodge Challenger              15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin                   15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Camaro Z28                    13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Pontiac Firebird              19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Fiat X1-9                     27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Porsche 914-2                 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Lotus Europa                  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Ford Pantera L                15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Ferrari Dino                  19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Maserati Bora                 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Volvo 142E                    21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2 rename(mtcars, Cylinders = cyl, Gears = gear) #>                      mpg Cylinders  disp  hp drat    wt  qsec vs am Gears carb #> Mazda RX4           21.0         6 160.0 110 3.90 2.620 16.46  0  1     4    4 #> Mazda RX4 Wag       21.0         6 160.0 110 3.90 2.875 17.02  0  1     4    4 #> Datsun 710          22.8         4 108.0  93 3.85 2.320 18.61  1  1     4    1 #> Hornet 4 Drive      21.4         6 258.0 110 3.08 3.215 19.44  1  0     3    1 #> Hornet Sportabout   18.7         8 360.0 175 3.15 3.440 17.02  0  0     3    2 #> Valiant             18.1         6 225.0 105 2.76 3.460 20.22  1  0     3    1 #> Duster 360          14.3         8 360.0 245 3.21 3.570 15.84  0  0     3    4 #> Merc 240D           24.4         4 146.7  62 3.69 3.190 20.00  1  0     4    2 #> Merc 230            22.8         4 140.8  95 3.92 3.150 22.90  1  0     4    2 #> Merc 280            19.2         6 167.6 123 3.92 3.440 18.30  1  0     4    4 #> Merc 280C           17.8         6 167.6 123 3.92 3.440 18.90  1  0     4    4 #> Merc 450SE          16.4         8 275.8 180 3.07 4.070 17.40  0  0     3    3 #> Merc 450SL          17.3         8 275.8 180 3.07 3.730 17.60  0  0     3    3 #> Merc 450SLC         15.2         8 275.8 180 3.07 3.780 18.00  0  0     3    3 #> Cadillac Fleetwood  10.4         8 472.0 205 2.93 5.250 17.98  0  0     3    4 #> Lincoln Continental 10.4         8 460.0 215 3.00 5.424 17.82  0  0     3    4 #> Chrysler Imperial   14.7         8 440.0 230 3.23 5.345 17.42  0  0     3    4 #> Fiat 128            32.4         4  78.7  66 4.08 2.200 19.47  1  1     4    1 #> Honda Civic         30.4         4  75.7  52 4.93 1.615 18.52  1  1     4    2 #> Toyota Corolla      33.9         4  71.1  65 4.22 1.835 19.90  1  1     4    1 #> Toyota Corona       21.5         4 120.1  97 3.70 2.465 20.01  1  0     3    1 #> Dodge Challenger    15.5         8 318.0 150 2.76 3.520 16.87  0  0     3    2 #> AMC Javelin         15.2         8 304.0 150 3.15 3.435 17.30  0  0     3    2 #> Camaro Z28          13.3         8 350.0 245 3.73 3.840 15.41  0  0     3    4 #> Pontiac Firebird    19.2         8 400.0 175 3.08 3.845 17.05  0  0     3    2 #> Fiat X1-9           27.3         4  79.0  66 4.08 1.935 18.90  1  1     4    1 #> Porsche 914-2       26.0         4 120.3  91 4.43 2.140 16.70  0  1     5    2 #> Lotus Europa        30.4         4  95.1 113 3.77 1.513 16.90  1  1     5    2 #> Ford Pantera L      15.8         8 351.0 264 4.22 3.170 14.50  0  1     5    4 #> Ferrari Dino        19.7         6 145.0 175 3.62 2.770 15.50  0  1     5    6 #> Maserati Bora       15.0         8 301.0 335 3.54 3.570 14.60  0  1     5    8 #> Volvo 142E          21.4         4 121.0 109 4.11 2.780 18.60  1  1     4    2 mtcars %>% rename(MilesPerGallon = mpg) #>                     MilesPerGallon cyl  disp  hp drat    wt  qsec vs am gear #> Mazda RX4                     21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag                 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Datsun 710                    22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Hornet 4 Drive                21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Hornet Sportabout             18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Valiant                       18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Duster 360                    14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Merc 240D                     24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Merc 230                      22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 280                      19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C                     17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Merc 450SE                    16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL                    17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC                   15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Cadillac Fleetwood            10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental           10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial             14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Fiat 128                      32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic                   30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla                33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Toyota Corona                 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Dodge Challenger              15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin                   15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Camaro Z28                    13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Pontiac Firebird              19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Fiat X1-9                     27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Porsche 914-2                 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Lotus Europa                  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Ford Pantera L                15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Ferrari Dino                  19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Maserati Bora                 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Volvo 142E                    21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2  rename_with(mtcars, toupper) #>                      MPG CYL  DISP  HP DRAT    WT  QSEC VS AM GEAR CARB #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 rename_with(mtcars, toupper, starts_with(\"c\")) #>                      mpg CYL  disp  hp drat    wt  qsec vs am gear CARB #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"/reference/replace_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace missing values — replace_na","title":"Replace missing values — replace_na","text":"Replace missing values data.frame vector.","code":""},{"path":"/reference/replace_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace missing values — replace_na","text":"","code":"replace_na(data, replace, ...)"},{"path":"/reference/replace_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace missing values — replace_na","text":"data data.frame vector. replace data data.frame, named list giving value replace NA column. data vector, single value used replacement. ... Additional arguments passed onto methods; currently used.","code":""},{"path":"/reference/replace_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace missing values — replace_na","text":"data data.frame, replace_na() returns data.frame. data vector, replace_na() returns vector class determined union data replace.","code":""},{"path":[]},{"path":"/reference/replace_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace missing values — replace_na","text":"","code":"df <- data.frame(x = c(1, 2, NA), y = c(\"a\", NA, \"b\"), stringsAsFactors = FALSE) df %>% replace_na(list(x = 0, y = \"unknown\")) #>   x       y #> 1 1       a #> 2 2 unknown #> 3 0       b df %>% mutate(x = replace_na(x, 0)) #>   x    y #> 1 1    a #> 2 2 <NA> #> 3 0    b  df$x %>% replace_na(0) #> [1] 1 2 0 df$y %>% replace_na(\"unknown\") #> [1] \"a\"       \"unknown\" \"b\""},{"path":"/reference/rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for working with row names — rownames","title":"Tools for working with row names — rownames","text":"quarters, considered best avoid row names, effectively character column different semantics every column. functions allow detect data.frame row names (has_rownames()), remove (remove_rownames()), convert back--forth explicit column (rownames_to_column() column_to_rownames()). Also included rowid_to_column(), adds column start dataframe ascending sequential row ids starting 1. Note remove existing row names.","code":""},{"path":"/reference/rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for working with row names — rownames","text":"","code":"rownames_to_column(.data, var = \"rowname\")  rowid_to_column(.data, var = \"rowid\")  column_to_rownames(.data, var = \"rowname\")  remove_rownames(.data)  has_rownames(.data)"},{"path":"/reference/rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for working with row names — rownames","text":".data data.frame. var character(1). name column use row names.","code":""},{"path":"/reference/rownames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for working with row names — rownames","text":"column_to_rownames() always returns data.frame. has_rownames() returns logical(1). functions return object class input.","code":""},{"path":"/reference/rownames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for working with row names — rownames","text":"","code":"# Detect row names has_rownames(mtcars) #> [1] TRUE has_rownames(iris) #> [1] FALSE  # Remove row names remove_rownames(mtcars) %>% has_rownames() #> [1] FALSE  # Convert between row names and column mtcars <- rownames_to_column(mtcars, var = \"car\") column_to_rownames(mtcars, var = \"car\") %>% head() #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  # Adding rowid as a column rowid_to_column(iris) %>% head() #>   rowid Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1     1          5.1         3.5          1.4         0.2  setosa #> 2     2          4.9         3.0          1.4         0.2  setosa #> 3     3          4.7         3.2          1.3         0.2  setosa #> 4     4          4.6         3.1          1.5         0.2  setosa #> 5     5          5.0         3.6          1.4         0.2  setosa #> 6     6          5.4         3.9          1.7         0.4  setosa"},{"path":"/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset columns using their names and types — select","title":"Subset columns using their names and types — select","text":"Select (optionally rename) variables data.frame, using concise mini-language makes easy refer variables based name (e.g. :f selects columns left f right). can also use predicate functions like .numeric() select variables based properties.","code":""},{"path":"/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset columns using their names and types — select","text":"","code":"select(.data, ...)"},{"path":"/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset columns using their names and types — select","text":".data data.frame. ... <poor-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset columns using their names and types — select","text":"object type .data. output following properties: Rows affected. Output columns subset input columns, potentially different order. Columns renamed new_name = old_name form used. Data frame attributes preserved. Groups maintained; select grouping variables.","code":""},{"path":[]},{"path":"/reference/select.html","id":"overview-of-selection-features","dir":"Reference","previous_headings":"","what":"Overview of selection features","title":"Subset columns using their names and types — select","text":"poorman selections implement dialect R operators make easy select variables: : selecting range consecutive variables. ! taking complement set variables. & | selecting intersection union two sets variables. c() combining selections. addition, can use selection helpers. helpers select specific columns: everything(): Matches variables. last_col(): Select last variable, possibly offset. helpers select variables matching patterns names: starts_with(): Starts prefix. ends_with(): Ends suffix. contains(): Contains literal string. matches(): Matches regular expression. num_range(): Matches numerical range like x01, x02, x03. helpers select variables character vector: all_of(): Matches variable names character vector. names must present, otherwise --bounds error thrown. any_of(): all_of(), except error thrown names exist. helper selects variables function: (): Applies function variables selects function returns TRUE.","code":""},{"path":"/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset columns using their names and types — select","text":"","code":"# Here we show the usage for the basic selection operators. See the # specific help pages to learn about helpers like [starts_with()].  # Select variables by name: mtcars %>% select(mpg) #>                      mpg #> Mazda RX4           21.0 #> Mazda RX4 Wag       21.0 #> Datsun 710          22.8 #> Hornet 4 Drive      21.4 #> Hornet Sportabout   18.7 #> Valiant             18.1 #> Duster 360          14.3 #> Merc 240D           24.4 #> Merc 230            22.8 #> Merc 280            19.2 #> Merc 280C           17.8 #> Merc 450SE          16.4 #> Merc 450SL          17.3 #> Merc 450SLC         15.2 #> Cadillac Fleetwood  10.4 #> Lincoln Continental 10.4 #> Chrysler Imperial   14.7 #> Fiat 128            32.4 #> Honda Civic         30.4 #> Toyota Corolla      33.9 #> Toyota Corona       21.5 #> Dodge Challenger    15.5 #> AMC Javelin         15.2 #> Camaro Z28          13.3 #> Pontiac Firebird    19.2 #> Fiat X1-9           27.3 #> Porsche 914-2       26.0 #> Lotus Europa        30.4 #> Ford Pantera L      15.8 #> Ferrari Dino        19.7 #> Maserati Bora       15.0 #> Volvo 142E          21.4  # Select multiple variables by separating them with commas. Note # how the order of columns is determined by the order of inputs: mtcars %>% select(disp, gear, am) #>                      disp gear am #> Mazda RX4           160.0    4  1 #> Mazda RX4 Wag       160.0    4  1 #> Datsun 710          108.0    4  1 #> Hornet 4 Drive      258.0    3  0 #> Hornet Sportabout   360.0    3  0 #> Valiant             225.0    3  0 #> Duster 360          360.0    3  0 #> Merc 240D           146.7    4  0 #> Merc 230            140.8    4  0 #> Merc 280            167.6    4  0 #> Merc 280C           167.6    4  0 #> Merc 450SE          275.8    3  0 #> Merc 450SL          275.8    3  0 #> Merc 450SLC         275.8    3  0 #> Cadillac Fleetwood  472.0    3  0 #> Lincoln Continental 460.0    3  0 #> Chrysler Imperial   440.0    3  0 #> Fiat 128             78.7    4  1 #> Honda Civic          75.7    4  1 #> Toyota Corolla       71.1    4  1 #> Toyota Corona       120.1    3  0 #> Dodge Challenger    318.0    3  0 #> AMC Javelin         304.0    3  0 #> Camaro Z28          350.0    3  0 #> Pontiac Firebird    400.0    3  0 #> Fiat X1-9            79.0    4  1 #> Porsche 914-2       120.3    5  1 #> Lotus Europa         95.1    5  1 #> Ford Pantera L      351.0    5  1 #> Ferrari Dino        145.0    5  1 #> Maserati Bora       301.0    5  1 #> Volvo 142E          121.0    4  1  # Rename variables: mtcars %>% select(MilesPerGallon = mpg, everything()) #>                     MilesPerGallon cyl  disp  hp drat    wt  qsec vs am gear #> Mazda RX4                     21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag                 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Datsun 710                    22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Hornet 4 Drive                21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Hornet Sportabout             18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Valiant                       18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Duster 360                    14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Merc 240D                     24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Merc 230                      22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 280                      19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C                     17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Merc 450SE                    16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL                    17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC                   15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Cadillac Fleetwood            10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental           10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial             14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Fiat 128                      32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic                   30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla                33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Toyota Corona                 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Dodge Challenger              15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin                   15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Camaro Z28                    13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Pontiac Firebird              19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Fiat X1-9                     27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Porsche 914-2                 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Lotus Europa                  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Ford Pantera L                15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Ferrari Dino                  19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Maserati Bora                 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Volvo 142E                    21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2  # The `:` operator selects a range of consecutive variables: select(mtcars, mpg:cyl) #>                      mpg cyl #> Mazda RX4           21.0   6 #> Mazda RX4 Wag       21.0   6 #> Datsun 710          22.8   4 #> Hornet 4 Drive      21.4   6 #> Hornet Sportabout   18.7   8 #> Valiant             18.1   6 #> Duster 360          14.3   8 #> Merc 240D           24.4   4 #> Merc 230            22.8   4 #> Merc 280            19.2   6 #> Merc 280C           17.8   6 #> Merc 450SE          16.4   8 #> Merc 450SL          17.3   8 #> Merc 450SLC         15.2   8 #> Cadillac Fleetwood  10.4   8 #> Lincoln Continental 10.4   8 #> Chrysler Imperial   14.7   8 #> Fiat 128            32.4   4 #> Honda Civic         30.4   4 #> Toyota Corolla      33.9   4 #> Toyota Corona       21.5   4 #> Dodge Challenger    15.5   8 #> AMC Javelin         15.2   8 #> Camaro Z28          13.3   8 #> Pontiac Firebird    19.2   8 #> Fiat X1-9           27.3   4 #> Porsche 914-2       26.0   4 #> Lotus Europa        30.4   4 #> Ford Pantera L      15.8   8 #> Ferrari Dino        19.7   6 #> Maserati Bora       15.0   8 #> Volvo 142E          21.4   4  # The `!` operator negates a selection: mtcars %>% select(!(mpg:qsec)) #>                     vs am gear carb #> Mazda RX4            0  1    4    4 #> Mazda RX4 Wag        0  1    4    4 #> Datsun 710           1  1    4    1 #> Hornet 4 Drive       1  0    3    1 #> Hornet Sportabout    0  0    3    2 #> Valiant              1  0    3    1 #> Duster 360           0  0    3    4 #> Merc 240D            1  0    4    2 #> Merc 230             1  0    4    2 #> Merc 280             1  0    4    4 #> Merc 280C            1  0    4    4 #> Merc 450SE           0  0    3    3 #> Merc 450SL           0  0    3    3 #> Merc 450SLC          0  0    3    3 #> Cadillac Fleetwood   0  0    3    4 #> Lincoln Continental  0  0    3    4 #> Chrysler Imperial    0  0    3    4 #> Fiat 128             1  1    4    1 #> Honda Civic          1  1    4    2 #> Toyota Corolla       1  1    4    1 #> Toyota Corona        1  0    3    1 #> Dodge Challenger     0  0    3    2 #> AMC Javelin          0  0    3    2 #> Camaro Z28           0  0    3    4 #> Pontiac Firebird     0  0    3    2 #> Fiat X1-9            1  1    4    1 #> Porsche 914-2        0  1    5    2 #> Lotus Europa         1  1    5    2 #> Ford Pantera L       0  1    5    4 #> Ferrari Dino         0  1    5    6 #> Maserati Bora        0  1    5    8 #> Volvo 142E           1  1    4    2 mtcars %>% select(!ends_with(\"p\")) #>                      mpg cyl drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 4.11 2.780 18.60  1  1    4    2  # `&` and `|` take the intersection or the union of two selections: iris %>% select(starts_with(\"Petal\") & ends_with(\"Width\")) #>     Petal.Length Petal.Width Sepal.Width #> 1            1.4         0.2         3.5 #> 2            1.4         0.2         3.0 #> 3            1.3         0.2         3.2 #> 4            1.5         0.2         3.1 #> 5            1.4         0.2         3.6 #> 6            1.7         0.4         3.9 #> 7            1.4         0.3         3.4 #> 8            1.5         0.2         3.4 #> 9            1.4         0.2         2.9 #> 10           1.5         0.1         3.1 #> 11           1.5         0.2         3.7 #> 12           1.6         0.2         3.4 #> 13           1.4         0.1         3.0 #> 14           1.1         0.1         3.0 #> 15           1.2         0.2         4.0 #> 16           1.5         0.4         4.4 #> 17           1.3         0.4         3.9 #> 18           1.4         0.3         3.5 #> 19           1.7         0.3         3.8 #> 20           1.5         0.3         3.8 #> 21           1.7         0.2         3.4 #> 22           1.5         0.4         3.7 #> 23           1.0         0.2         3.6 #> 24           1.7         0.5         3.3 #> 25           1.9         0.2         3.4 #> 26           1.6         0.2         3.0 #> 27           1.6         0.4         3.4 #> 28           1.5         0.2         3.5 #> 29           1.4         0.2         3.4 #> 30           1.6         0.2         3.2 #> 31           1.6         0.2         3.1 #> 32           1.5         0.4         3.4 #> 33           1.5         0.1         4.1 #> 34           1.4         0.2         4.2 #> 35           1.5         0.2         3.1 #> 36           1.2         0.2         3.2 #> 37           1.3         0.2         3.5 #> 38           1.4         0.1         3.6 #> 39           1.3         0.2         3.0 #> 40           1.5         0.2         3.4 #> 41           1.3         0.3         3.5 #> 42           1.3         0.3         2.3 #> 43           1.3         0.2         3.2 #> 44           1.6         0.6         3.5 #> 45           1.9         0.4         3.8 #> 46           1.4         0.3         3.0 #> 47           1.6         0.2         3.8 #> 48           1.4         0.2         3.2 #> 49           1.5         0.2         3.7 #> 50           1.4         0.2         3.3 #> 51           4.7         1.4         3.2 #> 52           4.5         1.5         3.2 #> 53           4.9         1.5         3.1 #> 54           4.0         1.3         2.3 #> 55           4.6         1.5         2.8 #> 56           4.5         1.3         2.8 #> 57           4.7         1.6         3.3 #> 58           3.3         1.0         2.4 #> 59           4.6         1.3         2.9 #> 60           3.9         1.4         2.7 #> 61           3.5         1.0         2.0 #> 62           4.2         1.5         3.0 #> 63           4.0         1.0         2.2 #> 64           4.7         1.4         2.9 #> 65           3.6         1.3         2.9 #> 66           4.4         1.4         3.1 #> 67           4.5         1.5         3.0 #> 68           4.1         1.0         2.7 #> 69           4.5         1.5         2.2 #> 70           3.9         1.1         2.5 #> 71           4.8         1.8         3.2 #> 72           4.0         1.3         2.8 #> 73           4.9         1.5         2.5 #> 74           4.7         1.2         2.8 #> 75           4.3         1.3         2.9 #> 76           4.4         1.4         3.0 #> 77           4.8         1.4         2.8 #> 78           5.0         1.7         3.0 #> 79           4.5         1.5         2.9 #> 80           3.5         1.0         2.6 #> 81           3.8         1.1         2.4 #> 82           3.7         1.0         2.4 #> 83           3.9         1.2         2.7 #> 84           5.1         1.6         2.7 #> 85           4.5         1.5         3.0 #> 86           4.5         1.6         3.4 #> 87           4.7         1.5         3.1 #> 88           4.4         1.3         2.3 #> 89           4.1         1.3         3.0 #> 90           4.0         1.3         2.5 #> 91           4.4         1.2         2.6 #> 92           4.6         1.4         3.0 #> 93           4.0         1.2         2.6 #> 94           3.3         1.0         2.3 #> 95           4.2         1.3         2.7 #> 96           4.2         1.2         3.0 #> 97           4.2         1.3         2.9 #> 98           4.3         1.3         2.9 #> 99           3.0         1.1         2.5 #> 100          4.1         1.3         2.8 #> 101          6.0         2.5         3.3 #> 102          5.1         1.9         2.7 #> 103          5.9         2.1         3.0 #> 104          5.6         1.8         2.9 #> 105          5.8         2.2         3.0 #> 106          6.6         2.1         3.0 #> 107          4.5         1.7         2.5 #> 108          6.3         1.8         2.9 #> 109          5.8         1.8         2.5 #> 110          6.1         2.5         3.6 #> 111          5.1         2.0         3.2 #> 112          5.3         1.9         2.7 #> 113          5.5         2.1         3.0 #> 114          5.0         2.0         2.5 #> 115          5.1         2.4         2.8 #> 116          5.3         2.3         3.2 #> 117          5.5         1.8         3.0 #> 118          6.7         2.2         3.8 #> 119          6.9         2.3         2.6 #> 120          5.0         1.5         2.2 #> 121          5.7         2.3         3.2 #> 122          4.9         2.0         2.8 #> 123          6.7         2.0         2.8 #> 124          4.9         1.8         2.7 #> 125          5.7         2.1         3.3 #> 126          6.0         1.8         3.2 #> 127          4.8         1.8         2.8 #> 128          4.9         1.8         3.0 #> 129          5.6         2.1         2.8 #> 130          5.8         1.6         3.0 #> 131          6.1         1.9         2.8 #> 132          6.4         2.0         3.8 #> 133          5.6         2.2         2.8 #> 134          5.1         1.5         2.8 #> 135          5.6         1.4         2.6 #> 136          6.1         2.3         3.0 #> 137          5.6         2.4         3.4 #> 138          5.5         1.8         3.1 #> 139          4.8         1.8         3.0 #> 140          5.4         2.1         3.1 #> 141          5.6         2.4         3.1 #> 142          5.1         2.3         3.1 #> 143          5.1         1.9         2.7 #> 144          5.9         2.3         3.2 #> 145          5.7         2.5         3.3 #> 146          5.2         2.3         3.0 #> 147          5.0         1.9         2.5 #> 148          5.2         2.0         3.0 #> 149          5.4         2.3         3.4 #> 150          5.1         1.8         3.0 iris %>% select(starts_with(\"Petal\") | ends_with(\"Width\")) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica  # To take the difference between two selections, combine the `&` and # `!` operators: iris %>% select(starts_with(\"Petal\") & !ends_with(\"Width\")) #>     Petal.Length #> 1            1.4 #> 2            1.4 #> 3            1.3 #> 4            1.5 #> 5            1.4 #> 6            1.7 #> 7            1.4 #> 8            1.5 #> 9            1.4 #> 10           1.5 #> 11           1.5 #> 12           1.6 #> 13           1.4 #> 14           1.1 #> 15           1.2 #> 16           1.5 #> 17           1.3 #> 18           1.4 #> 19           1.7 #> 20           1.5 #> 21           1.7 #> 22           1.5 #> 23           1.0 #> 24           1.7 #> 25           1.9 #> 26           1.6 #> 27           1.6 #> 28           1.5 #> 29           1.4 #> 30           1.6 #> 31           1.6 #> 32           1.5 #> 33           1.5 #> 34           1.4 #> 35           1.5 #> 36           1.2 #> 37           1.3 #> 38           1.4 #> 39           1.3 #> 40           1.5 #> 41           1.3 #> 42           1.3 #> 43           1.3 #> 44           1.6 #> 45           1.9 #> 46           1.4 #> 47           1.6 #> 48           1.4 #> 49           1.5 #> 50           1.4 #> 51           4.7 #> 52           4.5 #> 53           4.9 #> 54           4.0 #> 55           4.6 #> 56           4.5 #> 57           4.7 #> 58           3.3 #> 59           4.6 #> 60           3.9 #> 61           3.5 #> 62           4.2 #> 63           4.0 #> 64           4.7 #> 65           3.6 #> 66           4.4 #> 67           4.5 #> 68           4.1 #> 69           4.5 #> 70           3.9 #> 71           4.8 #> 72           4.0 #> 73           4.9 #> 74           4.7 #> 75           4.3 #> 76           4.4 #> 77           4.8 #> 78           5.0 #> 79           4.5 #> 80           3.5 #> 81           3.8 #> 82           3.7 #> 83           3.9 #> 84           5.1 #> 85           4.5 #> 86           4.5 #> 87           4.7 #> 88           4.4 #> 89           4.1 #> 90           4.0 #> 91           4.4 #> 92           4.6 #> 93           4.0 #> 94           3.3 #> 95           4.2 #> 96           4.2 #> 97           4.2 #> 98           4.3 #> 99           3.0 #> 100          4.1 #> 101          6.0 #> 102          5.1 #> 103          5.9 #> 104          5.6 #> 105          5.8 #> 106          6.6 #> 107          4.5 #> 108          6.3 #> 109          5.8 #> 110          6.1 #> 111          5.1 #> 112          5.3 #> 113          5.5 #> 114          5.0 #> 115          5.1 #> 116          5.3 #> 117          5.5 #> 118          6.7 #> 119          6.9 #> 120          5.0 #> 121          5.7 #> 122          4.9 #> 123          6.7 #> 124          4.9 #> 125          5.7 #> 126          6.0 #> 127          4.8 #> 128          4.9 #> 129          5.6 #> 130          5.8 #> 131          6.1 #> 132          6.4 #> 133          5.6 #> 134          5.1 #> 135          5.6 #> 136          6.1 #> 137          5.6 #> 138          5.5 #> 139          4.8 #> 140          5.4 #> 141          5.6 #> 142          5.1 #> 143          5.1 #> 144          5.9 #> 145          5.7 #> 146          5.2 #> 147          5.0 #> 148          5.2 #> 149          5.4 #> 150          5.1"},{"path":"/reference/select_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Helpers — select_helpers","title":"Select Helpers — select_helpers","text":"functions allow select variables based names. starts_with(): Starts prefix. ends_with(): Ends prefix. contains(): Contains literal string. matches(): Matches regular expression. all_of(): Matches variable names character vector. names must present, otherwise error thrown. any_of(): all_of() except throw error. everything(): Matches variables. last_col(): Select last variable, possibly offset.","code":""},{"path":"/reference/select_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Helpers — select_helpers","text":"","code":"starts_with(match, ignore.case = TRUE, vars = peek_vars())  ends_with(match, ignore.case = TRUE, vars = peek_vars())  contains(match, ignore.case = TRUE, vars = peek_vars())  matches(match, ignore.case = TRUE, perl = FALSE, vars = peek_vars())  num_range(prefix, range, width = NULL, vars = peek_vars())  all_of(x, vars = peek_vars())  any_of(x, vars = peek_vars())  everything(vars = peek_vars())  last_col(offset = 0L, vars = peek_vars())"},{"path":"/reference/select_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Helpers — select_helpers","text":"match character(n). length > 1, union matches taken. ignore.case logical(1). TRUE, default, ignores case matching names. vars character(n). character vector variable names. called inside selecting functions select(), automatically set names table. perl logical(1). Perl-compatible regexps used? prefix prefix starts numeric range. range integer(n). sequence integers, e.g. 1:5. width numeric(1). Optionally, \"width\" numeric range. example, range 2 gives \"01\", range three \"001\", etc. x character(n). vector column names. offset integer(1). Select nth variable end data.frame.","code":""},{"path":"/reference/select_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Helpers — select_helpers","text":"integer vector giving position matched variables.","code":""},{"path":[]},{"path":"/reference/select_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Helpers — select_helpers","text":"","code":"mtcars %>% select(starts_with(\"c\")) #>                     cyl carb #> Mazda RX4             6    4 #> Mazda RX4 Wag         6    4 #> Datsun 710            4    1 #> Hornet 4 Drive        6    1 #> Hornet Sportabout     8    2 #> Valiant               6    1 #> Duster 360            8    4 #> Merc 240D             4    2 #> Merc 230              4    2 #> Merc 280              6    4 #> Merc 280C             6    4 #> Merc 450SE            8    3 #> Merc 450SL            8    3 #> Merc 450SLC           8    3 #> Cadillac Fleetwood    8    4 #> Lincoln Continental   8    4 #> Chrysler Imperial     8    4 #> Fiat 128              4    1 #> Honda Civic           4    2 #> Toyota Corolla        4    1 #> Toyota Corona         4    1 #> Dodge Challenger      8    2 #> AMC Javelin           8    2 #> Camaro Z28            8    4 #> Pontiac Firebird      8    2 #> Fiat X1-9             4    1 #> Porsche 914-2         4    2 #> Lotus Europa          4    2 #> Ford Pantera L        8    4 #> Ferrari Dino          6    6 #> Maserati Bora         8    8 #> Volvo 142E            4    2 mtcars %>% select(starts_with(c(\"c\", \"h\"))) #>                     cyl  hp carb #> Mazda RX4             6 110    4 #> Mazda RX4 Wag         6 110    4 #> Datsun 710            4  93    1 #> Hornet 4 Drive        6 110    1 #> Hornet Sportabout     8 175    2 #> Valiant               6 105    1 #> Duster 360            8 245    4 #> Merc 240D             4  62    2 #> Merc 230              4  95    2 #> Merc 280              6 123    4 #> Merc 280C             6 123    4 #> Merc 450SE            8 180    3 #> Merc 450SL            8 180    3 #> Merc 450SLC           8 180    3 #> Cadillac Fleetwood    8 205    4 #> Lincoln Continental   8 215    4 #> Chrysler Imperial     8 230    4 #> Fiat 128              4  66    1 #> Honda Civic           4  52    2 #> Toyota Corolla        4  65    1 #> Toyota Corona         4  97    1 #> Dodge Challenger      8 150    2 #> AMC Javelin           8 150    2 #> Camaro Z28            8 245    4 #> Pontiac Firebird      8 175    2 #> Fiat X1-9             4  66    1 #> Porsche 914-2         4  91    2 #> Lotus Europa          4 113    2 #> Ford Pantera L        8 264    4 #> Ferrari Dino          6 175    6 #> Maserati Bora         8 335    8 #> Volvo 142E            4 109    2 mtcars %>% select(ends_with(\"b\")) #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2 mtcars %>% relocate(contains(\"a\"), .before = mpg) #>                     drat am gear carb  mpg cyl  disp  hp    wt  qsec vs #> Mazda RX4           3.90  1    4    4 21.0   6 160.0 110 2.620 16.46  0 #> Mazda RX4 Wag       3.90  1    4    4 21.0   6 160.0 110 2.875 17.02  0 #> Datsun 710          3.85  1    4    1 22.8   4 108.0  93 2.320 18.61  1 #> Hornet 4 Drive      3.08  0    3    1 21.4   6 258.0 110 3.215 19.44  1 #> Hornet Sportabout   3.15  0    3    2 18.7   8 360.0 175 3.440 17.02  0 #> Valiant             2.76  0    3    1 18.1   6 225.0 105 3.460 20.22  1 #> Duster 360          3.21  0    3    4 14.3   8 360.0 245 3.570 15.84  0 #> Merc 240D           3.69  0    4    2 24.4   4 146.7  62 3.190 20.00  1 #> Merc 230            3.92  0    4    2 22.8   4 140.8  95 3.150 22.90  1 #> Merc 280            3.92  0    4    4 19.2   6 167.6 123 3.440 18.30  1 #> Merc 280C           3.92  0    4    4 17.8   6 167.6 123 3.440 18.90  1 #> Merc 450SE          3.07  0    3    3 16.4   8 275.8 180 4.070 17.40  0 #> Merc 450SL          3.07  0    3    3 17.3   8 275.8 180 3.730 17.60  0 #> Merc 450SLC         3.07  0    3    3 15.2   8 275.8 180 3.780 18.00  0 #> Cadillac Fleetwood  2.93  0    3    4 10.4   8 472.0 205 5.250 17.98  0 #> Lincoln Continental 3.00  0    3    4 10.4   8 460.0 215 5.424 17.82  0 #> Chrysler Imperial   3.23  0    3    4 14.7   8 440.0 230 5.345 17.42  0 #> Fiat 128            4.08  1    4    1 32.4   4  78.7  66 2.200 19.47  1 #> Honda Civic         4.93  1    4    2 30.4   4  75.7  52 1.615 18.52  1 #> Toyota Corolla      4.22  1    4    1 33.9   4  71.1  65 1.835 19.90  1 #> Toyota Corona       3.70  0    3    1 21.5   4 120.1  97 2.465 20.01  1 #> Dodge Challenger    2.76  0    3    2 15.5   8 318.0 150 3.520 16.87  0 #> AMC Javelin         3.15  0    3    2 15.2   8 304.0 150 3.435 17.30  0 #> Camaro Z28          3.73  0    3    4 13.3   8 350.0 245 3.840 15.41  0 #> Pontiac Firebird    3.08  0    3    2 19.2   8 400.0 175 3.845 17.05  0 #> Fiat X1-9           4.08  1    4    1 27.3   4  79.0  66 1.935 18.90  1 #> Porsche 914-2       4.43  1    5    2 26.0   4 120.3  91 2.140 16.70  0 #> Lotus Europa        3.77  1    5    2 30.4   4  95.1 113 1.513 16.90  1 #> Ford Pantera L      4.22  1    5    4 15.8   8 351.0 264 3.170 14.50  0 #> Ferrari Dino        3.62  1    5    6 19.7   6 145.0 175 2.770 15.50  0 #> Maserati Bora       3.54  1    5    8 15.0   8 301.0 335 3.570 14.60  0 #> Volvo 142E          4.11  1    4    2 21.4   4 121.0 109 2.780 18.60  1 iris %>% select(matches(\".t.\")) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1            5.1         3.5          1.4         0.2 #> 2            4.9         3.0          1.4         0.2 #> 3            4.7         3.2          1.3         0.2 #> 4            4.6         3.1          1.5         0.2 #> 5            5.0         3.6          1.4         0.2 #> 6            5.4         3.9          1.7         0.4 #> 7            4.6         3.4          1.4         0.3 #> 8            5.0         3.4          1.5         0.2 #> 9            4.4         2.9          1.4         0.2 #> 10           4.9         3.1          1.5         0.1 #> 11           5.4         3.7          1.5         0.2 #> 12           4.8         3.4          1.6         0.2 #> 13           4.8         3.0          1.4         0.1 #> 14           4.3         3.0          1.1         0.1 #> 15           5.8         4.0          1.2         0.2 #> 16           5.7         4.4          1.5         0.4 #> 17           5.4         3.9          1.3         0.4 #> 18           5.1         3.5          1.4         0.3 #> 19           5.7         3.8          1.7         0.3 #> 20           5.1         3.8          1.5         0.3 #> 21           5.4         3.4          1.7         0.2 #> 22           5.1         3.7          1.5         0.4 #> 23           4.6         3.6          1.0         0.2 #> 24           5.1         3.3          1.7         0.5 #> 25           4.8         3.4          1.9         0.2 #> 26           5.0         3.0          1.6         0.2 #> 27           5.0         3.4          1.6         0.4 #> 28           5.2         3.5          1.5         0.2 #> 29           5.2         3.4          1.4         0.2 #> 30           4.7         3.2          1.6         0.2 #> 31           4.8         3.1          1.6         0.2 #> 32           5.4         3.4          1.5         0.4 #> 33           5.2         4.1          1.5         0.1 #> 34           5.5         4.2          1.4         0.2 #> 35           4.9         3.1          1.5         0.2 #> 36           5.0         3.2          1.2         0.2 #> 37           5.5         3.5          1.3         0.2 #> 38           4.9         3.6          1.4         0.1 #> 39           4.4         3.0          1.3         0.2 #> 40           5.1         3.4          1.5         0.2 #> 41           5.0         3.5          1.3         0.3 #> 42           4.5         2.3          1.3         0.3 #> 43           4.4         3.2          1.3         0.2 #> 44           5.0         3.5          1.6         0.6 #> 45           5.1         3.8          1.9         0.4 #> 46           4.8         3.0          1.4         0.3 #> 47           5.1         3.8          1.6         0.2 #> 48           4.6         3.2          1.4         0.2 #> 49           5.3         3.7          1.5         0.2 #> 50           5.0         3.3          1.4         0.2 #> 51           7.0         3.2          4.7         1.4 #> 52           6.4         3.2          4.5         1.5 #> 53           6.9         3.1          4.9         1.5 #> 54           5.5         2.3          4.0         1.3 #> 55           6.5         2.8          4.6         1.5 #> 56           5.7         2.8          4.5         1.3 #> 57           6.3         3.3          4.7         1.6 #> 58           4.9         2.4          3.3         1.0 #> 59           6.6         2.9          4.6         1.3 #> 60           5.2         2.7          3.9         1.4 #> 61           5.0         2.0          3.5         1.0 #> 62           5.9         3.0          4.2         1.5 #> 63           6.0         2.2          4.0         1.0 #> 64           6.1         2.9          4.7         1.4 #> 65           5.6         2.9          3.6         1.3 #> 66           6.7         3.1          4.4         1.4 #> 67           5.6         3.0          4.5         1.5 #> 68           5.8         2.7          4.1         1.0 #> 69           6.2         2.2          4.5         1.5 #> 70           5.6         2.5          3.9         1.1 #> 71           5.9         3.2          4.8         1.8 #> 72           6.1         2.8          4.0         1.3 #> 73           6.3         2.5          4.9         1.5 #> 74           6.1         2.8          4.7         1.2 #> 75           6.4         2.9          4.3         1.3 #> 76           6.6         3.0          4.4         1.4 #> 77           6.8         2.8          4.8         1.4 #> 78           6.7         3.0          5.0         1.7 #> 79           6.0         2.9          4.5         1.5 #> 80           5.7         2.6          3.5         1.0 #> 81           5.5         2.4          3.8         1.1 #> 82           5.5         2.4          3.7         1.0 #> 83           5.8         2.7          3.9         1.2 #> 84           6.0         2.7          5.1         1.6 #> 85           5.4         3.0          4.5         1.5 #> 86           6.0         3.4          4.5         1.6 #> 87           6.7         3.1          4.7         1.5 #> 88           6.3         2.3          4.4         1.3 #> 89           5.6         3.0          4.1         1.3 #> 90           5.5         2.5          4.0         1.3 #> 91           5.5         2.6          4.4         1.2 #> 92           6.1         3.0          4.6         1.4 #> 93           5.8         2.6          4.0         1.2 #> 94           5.0         2.3          3.3         1.0 #> 95           5.6         2.7          4.2         1.3 #> 96           5.7         3.0          4.2         1.2 #> 97           5.7         2.9          4.2         1.3 #> 98           6.2         2.9          4.3         1.3 #> 99           5.1         2.5          3.0         1.1 #> 100          5.7         2.8          4.1         1.3 #> 101          6.3         3.3          6.0         2.5 #> 102          5.8         2.7          5.1         1.9 #> 103          7.1         3.0          5.9         2.1 #> 104          6.3         2.9          5.6         1.8 #> 105          6.5         3.0          5.8         2.2 #> 106          7.6         3.0          6.6         2.1 #> 107          4.9         2.5          4.5         1.7 #> 108          7.3         2.9          6.3         1.8 #> 109          6.7         2.5          5.8         1.8 #> 110          7.2         3.6          6.1         2.5 #> 111          6.5         3.2          5.1         2.0 #> 112          6.4         2.7          5.3         1.9 #> 113          6.8         3.0          5.5         2.1 #> 114          5.7         2.5          5.0         2.0 #> 115          5.8         2.8          5.1         2.4 #> 116          6.4         3.2          5.3         2.3 #> 117          6.5         3.0          5.5         1.8 #> 118          7.7         3.8          6.7         2.2 #> 119          7.7         2.6          6.9         2.3 #> 120          6.0         2.2          5.0         1.5 #> 121          6.9         3.2          5.7         2.3 #> 122          5.6         2.8          4.9         2.0 #> 123          7.7         2.8          6.7         2.0 #> 124          6.3         2.7          4.9         1.8 #> 125          6.7         3.3          5.7         2.1 #> 126          7.2         3.2          6.0         1.8 #> 127          6.2         2.8          4.8         1.8 #> 128          6.1         3.0          4.9         1.8 #> 129          6.4         2.8          5.6         2.1 #> 130          7.2         3.0          5.8         1.6 #> 131          7.4         2.8          6.1         1.9 #> 132          7.9         3.8          6.4         2.0 #> 133          6.4         2.8          5.6         2.2 #> 134          6.3         2.8          5.1         1.5 #> 135          6.1         2.6          5.6         1.4 #> 136          7.7         3.0          6.1         2.3 #> 137          6.3         3.4          5.6         2.4 #> 138          6.4         3.1          5.5         1.8 #> 139          6.0         3.0          4.8         1.8 #> 140          6.9         3.1          5.4         2.1 #> 141          6.7         3.1          5.6         2.4 #> 142          6.9         3.1          5.1         2.3 #> 143          5.8         2.7          5.1         1.9 #> 144          6.8         3.2          5.9         2.3 #> 145          6.7         3.3          5.7         2.5 #> 146          6.7         3.0          5.2         2.3 #> 147          6.3         2.5          5.0         1.9 #> 148          6.5         3.0          5.2         2.0 #> 149          6.2         3.4          5.4         2.3 #> 150          5.9         3.0          5.1         1.8 mtcars %>% select(last_col()) #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2  # `all_of()` selects the variables in a character vector: iris %>% select(all_of(c(\"Petal.Length\", \"Petal.Width\"))) #>     Petal.Length Petal.Width #> 1            1.4         0.2 #> 2            1.4         0.2 #> 3            1.3         0.2 #> 4            1.5         0.2 #> 5            1.4         0.2 #> 6            1.7         0.4 #> 7            1.4         0.3 #> 8            1.5         0.2 #> 9            1.4         0.2 #> 10           1.5         0.1 #> 11           1.5         0.2 #> 12           1.6         0.2 #> 13           1.4         0.1 #> 14           1.1         0.1 #> 15           1.2         0.2 #> 16           1.5         0.4 #> 17           1.3         0.4 #> 18           1.4         0.3 #> 19           1.7         0.3 #> 20           1.5         0.3 #> 21           1.7         0.2 #> 22           1.5         0.4 #> 23           1.0         0.2 #> 24           1.7         0.5 #> 25           1.9         0.2 #> 26           1.6         0.2 #> 27           1.6         0.4 #> 28           1.5         0.2 #> 29           1.4         0.2 #> 30           1.6         0.2 #> 31           1.6         0.2 #> 32           1.5         0.4 #> 33           1.5         0.1 #> 34           1.4         0.2 #> 35           1.5         0.2 #> 36           1.2         0.2 #> 37           1.3         0.2 #> 38           1.4         0.1 #> 39           1.3         0.2 #> 40           1.5         0.2 #> 41           1.3         0.3 #> 42           1.3         0.3 #> 43           1.3         0.2 #> 44           1.6         0.6 #> 45           1.9         0.4 #> 46           1.4         0.3 #> 47           1.6         0.2 #> 48           1.4         0.2 #> 49           1.5         0.2 #> 50           1.4         0.2 #> 51           4.7         1.4 #> 52           4.5         1.5 #> 53           4.9         1.5 #> 54           4.0         1.3 #> 55           4.6         1.5 #> 56           4.5         1.3 #> 57           4.7         1.6 #> 58           3.3         1.0 #> 59           4.6         1.3 #> 60           3.9         1.4 #> 61           3.5         1.0 #> 62           4.2         1.5 #> 63           4.0         1.0 #> 64           4.7         1.4 #> 65           3.6         1.3 #> 66           4.4         1.4 #> 67           4.5         1.5 #> 68           4.1         1.0 #> 69           4.5         1.5 #> 70           3.9         1.1 #> 71           4.8         1.8 #> 72           4.0         1.3 #> 73           4.9         1.5 #> 74           4.7         1.2 #> 75           4.3         1.3 #> 76           4.4         1.4 #> 77           4.8         1.4 #> 78           5.0         1.7 #> 79           4.5         1.5 #> 80           3.5         1.0 #> 81           3.8         1.1 #> 82           3.7         1.0 #> 83           3.9         1.2 #> 84           5.1         1.6 #> 85           4.5         1.5 #> 86           4.5         1.6 #> 87           4.7         1.5 #> 88           4.4         1.3 #> 89           4.1         1.3 #> 90           4.0         1.3 #> 91           4.4         1.2 #> 92           4.6         1.4 #> 93           4.0         1.2 #> 94           3.3         1.0 #> 95           4.2         1.3 #> 96           4.2         1.2 #> 97           4.2         1.3 #> 98           4.3         1.3 #> 99           3.0         1.1 #> 100          4.1         1.3 #> 101          6.0         2.5 #> 102          5.1         1.9 #> 103          5.9         2.1 #> 104          5.6         1.8 #> 105          5.8         2.2 #> 106          6.6         2.1 #> 107          4.5         1.7 #> 108          6.3         1.8 #> 109          5.8         1.8 #> 110          6.1         2.5 #> 111          5.1         2.0 #> 112          5.3         1.9 #> 113          5.5         2.1 #> 114          5.0         2.0 #> 115          5.1         2.4 #> 116          5.3         2.3 #> 117          5.5         1.8 #> 118          6.7         2.2 #> 119          6.9         2.3 #> 120          5.0         1.5 #> 121          5.7         2.3 #> 122          4.9         2.0 #> 123          6.7         2.0 #> 124          4.9         1.8 #> 125          5.7         2.1 #> 126          6.0         1.8 #> 127          4.8         1.8 #> 128          4.9         1.8 #> 129          5.6         2.1 #> 130          5.8         1.6 #> 131          6.1         1.9 #> 132          6.4         2.0 #> 133          5.6         2.2 #> 134          5.1         1.5 #> 135          5.6         1.4 #> 136          6.1         2.3 #> 137          5.6         2.4 #> 138          5.5         1.8 #> 139          4.8         1.8 #> 140          5.4         2.1 #> 141          5.6         2.4 #> 142          5.1         2.3 #> 143          5.1         1.9 #> 144          5.9         2.3 #> 145          5.7         2.5 #> 146          5.2         2.3 #> 147          5.0         1.9 #> 148          5.2         2.0 #> 149          5.4         2.3 #> 150          5.1         1.8 # `all_of()` is strict and will throw an error if the column name isn't found try({iris %>% select(all_of(c(\"Species\", \"Genres\")))}) #> Error in all_of(c(\"Species\", \"Genres\")) :  #>   The column Genres does not exist. # However `any_of()` allows missing variables iris %>% select(any_of(c(\"Species\", \"Genres\"))) #>        Species #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica"},{"path":"/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows by position — slice","title":"Subset rows by position — slice","text":"Subset rows original position data.frame. Grouped data.frames use position within group.","code":""},{"path":"/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows by position — slice","text":"","code":"slice(.data, ...)  slice_head(.data, ..., n, prop)  slice_tail(.data, ..., n, prop)  slice_min(.data, order_by, ..., n, prop, with_ties = TRUE)  slice_max(.data, order_by, ..., n, prop, with_ties = TRUE)  slice_sample(.data, ..., n, prop, weight_by = NULL, replace = FALSE)"},{"path":"/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows by position — slice","text":".data data.frame. ... slice(): integer row values. Provide either positive values keep, negative values drop. values provided must either positive negative. Indices beyond number rows input silently ignored. n, prop Provide either n, number rows, prop, proportion rows select. neither supplied, n = 1 used. n greater number rows group (prop > 1), result silently truncated group size. proportion group size integer, rounded . order_by variable order . with_ties logical(1). ties kept together? default, TRUE, may return rows request. Use FALSE ignore ties, return first n rows. weight_by Sampling weights. must evaluate vector non-negative numbers length input. Weights automatically standardised sum 1. replace logical(1). sampling performed (TRUE) without (FALSE, default) replacement.","code":""},{"path":"/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows by position — slice","text":"object type .data. output following properties: row may appear 0, 1, many times output. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":"/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows by position — slice","text":"","code":"slice(mtcars, c(1, 2, 3)) #>                mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 mtcars %>% slice(1:3) #>                mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1  # Similar to head(mtcars, 1) mtcars %>% slice(1L) #>           mpg cyl disp  hp drat   wt  qsec vs am gear carb #> Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4  # Similar to tail(mtcars, 1): mtcars %>% slice(n()) #>             mpg cyl disp  hp drat   wt qsec vs am gear carb #> Volvo 142E 21.4   4  121 109 4.11 2.78 18.6  1  1    4    2 mtcars %>% slice(5:n()) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 # Rows can be dropped with negative indices: slice(mtcars, -(1:4)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # First and last rows based on existing order mtcars %>% slice_head(n = 5) #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 mtcars %>% slice_tail(n = 5) #>                 mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6 #> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2  # Grouped operations: mtcars %>% group_by(am, cyl, gear) %>% slice_head(n = 2) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Toyota Corona     21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Fiat 128          32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Porsche 914-2     26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa      30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ferrari Dino      19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Ford Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora     15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8"},{"path":"/reference/summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce multiple values down to a single value — summarise","title":"Reduce multiple values down to a single value — summarise","text":"Create one scalar variables summarising variables existing data.frame. Grouped data.frames result one row output group.","code":""},{"path":"/reference/summarise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce multiple values down to a single value — summarise","text":"","code":"summarise(.data, ..., .groups = NULL)  summarize(.data, ..., .groups = NULL)"},{"path":"/reference/summarise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce multiple values down to a single value — summarise","text":".data data.frame. ... Name-value pairs summary functions. name name variable result. .groups character(1). Grouping structure result. \"drop_last\": drops last level grouping. \"drop\": levels grouping dropped. \"keep\": keeps grouping structure .data. .groups specified, chosen based number rows results: results 1 row, get \"drop_last\". number rows varies, get \"keep\". addition, message informs choice, unless result ungrouped, option \"poorman.summarise.inform\" set FALSE. value can : vector length 1, e.g. min(x), n(), sum(.na(y)). vector length n, e.g. quantile().","code":""},{"path":"/reference/summarise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce multiple values down to a single value — summarise","text":"summarise() summarize() synonyms.","code":""},{"path":"/reference/summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce multiple values down to a single value — summarise","text":"","code":"# A summary applied to ungrouped tbl returns a single row mtcars %>%   summarise(mean = mean(disp), n = n()) #>       mean  n #> 1 230.7219 32  # Usually, you'll want to group first mtcars %>%   group_by(cyl) %>%   summarise(mean = mean(disp), n = n()) #>   cyl     mean  n #> 1   4 105.1364 11 #> 2   6 183.3143  7 #> 3   8 353.1000 14  # You can summarise to more than one value: mtcars %>%    group_by(cyl) %>%    summarise(qs = quantile(disp, c(0.25, 0.75)), prob = c(0.25, 0.75)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` argument. #>   cyl      x prob #> 1   4  78.85 0.25 #> 2   4 120.65 0.75 #> 3   6 160.00 0.25 #> 4   6 196.30 0.75 #> 5   8 301.75 0.25 #> 6   8 390.00 0.75  # You use a data frame to create multiple columns so you can wrap # this up into a function: my_quantile <- function(x, probs) {   data.frame(x = quantile(x, probs), probs = probs) } mtcars %>%   group_by(cyl) %>%   summarise(my_quantile(disp, c(0.25, 0.75))) #> Error in my_quantile(disp, c(0.25, 0.75)): could not find function \"my_quantile\"  # Each summary call removes one grouping level (since that group # is now just a single row) mtcars %>%   group_by(cyl, vs) %>%   summarise(cyl_n = n()) %>%   group_vars() #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` argument. #> [1] \"cyl\""},{"path":"/reference/union_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Union All — union_all","title":"Union All — union_all","text":"Union elements R objects together.","code":""},{"path":"/reference/union_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union All — union_all","text":"","code":"union_all(x, y, ...)"},{"path":"/reference/union_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union All — union_all","text":"x, y objects union elements (ignoring order) ... arguments passed methods","code":""},{"path":"/reference/union_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union All — union_all","text":"","code":"first <- mtcars[1:20, ] second <- mtcars[10:32, ] union_all(first, second) #>                       mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4            21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag        21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710           22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive       21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout    18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant              18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360           14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D            24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230             22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280             19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C            17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE           16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL           17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC          15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood   10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial    14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128             32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic          30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla       33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Merc 2801            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C1           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE1          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL1          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC1         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood1  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental1 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial1   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 1281            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic1         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla1      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona        21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger     15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin          15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28           13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird     19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9            27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2        26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa         30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L       15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino         19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora        15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E           21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # union_all does not remove duplicates a <- data.frame(column = c(1:10, 10)) b <- data.frame(column = c(1:5, 5)) union_all(a, b) #>    column #> 1       1 #> 2       2 #> 3       3 #> 4       4 #> 5       5 #> 6       6 #> 7       7 #> 8       8 #> 9       9 #> 10     10 #> 11     10 #> 12      1 #> 13      2 #> 14      3 #> 15      4 #> 16      5 #> 17      5"},{"path":"/reference/unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite Multiple Columns Into One — unite","title":"Unite Multiple Columns Into One — unite","text":"Convenience function paste together multiple columns.","code":""},{"path":"/reference/unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite Multiple Columns Into One — unite","text":"","code":"unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"/reference/unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite Multiple Columns Into One — unite","text":"data data.frame. col character(1) symbol(1). name new column. ... columns unite. sep character(1). Separator use values. remove logical(1). TRUE, remove input columns output data.frame. na.rm logical(1). TRUE, missing values remove prior uniting value.","code":""},{"path":"/reference/unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite Multiple Columns Into One — unite","text":"data.frame columns passed via ... pasted together new column.","code":""},{"path":"/reference/unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite Multiple Columns Into One — unite","text":"","code":"df <- data.frame(x = c(\"a\", \"a\", NA, NA), y = c(\"b\", NA, \"b\", NA)) df #>      x    y #> 1    a    b #> 2    a <NA> #> 3 <NA>    b #> 4 <NA> <NA>  df %>% unite(\"z\", x:y, remove = FALSE) #>       z    x    y #> 1   a_b    a    b #> 2  a_NA    a <NA> #> 3  NA_b <NA>    b #> 4 NA_NA <NA> <NA> # To remove missing values: df %>% unite(\"z\", x:y, na.rm = TRUE, remove = FALSE) #>     z    x    y #> 1 a_b    a    b #> 2   a    a <NA> #> 3   b <NA>    b #> 4     <NA> <NA>"},{"path":"/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"selection helper selects variables function returns TRUE.","code":""},{"path":"/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE.","code":""},{"path":"/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"vector integer column positions result fn evaluation.","code":""},{"path":[]},{"path":"/reference/where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables with a function — where","text":"","code":"iris %>% select(where(is.numeric)) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1            5.1         3.5          1.4         0.2 #> 2            4.9         3.0          1.4         0.2 #> 3            4.7         3.2          1.3         0.2 #> 4            4.6         3.1          1.5         0.2 #> 5            5.0         3.6          1.4         0.2 #> 6            5.4         3.9          1.7         0.4 #> 7            4.6         3.4          1.4         0.3 #> 8            5.0         3.4          1.5         0.2 #> 9            4.4         2.9          1.4         0.2 #> 10           4.9         3.1          1.5         0.1 #> 11           5.4         3.7          1.5         0.2 #> 12           4.8         3.4          1.6         0.2 #> 13           4.8         3.0          1.4         0.1 #> 14           4.3         3.0          1.1         0.1 #> 15           5.8         4.0          1.2         0.2 #> 16           5.7         4.4          1.5         0.4 #> 17           5.4         3.9          1.3         0.4 #> 18           5.1         3.5          1.4         0.3 #> 19           5.7         3.8          1.7         0.3 #> 20           5.1         3.8          1.5         0.3 #> 21           5.4         3.4          1.7         0.2 #> 22           5.1         3.7          1.5         0.4 #> 23           4.6         3.6          1.0         0.2 #> 24           5.1         3.3          1.7         0.5 #> 25           4.8         3.4          1.9         0.2 #> 26           5.0         3.0          1.6         0.2 #> 27           5.0         3.4          1.6         0.4 #> 28           5.2         3.5          1.5         0.2 #> 29           5.2         3.4          1.4         0.2 #> 30           4.7         3.2          1.6         0.2 #> 31           4.8         3.1          1.6         0.2 #> 32           5.4         3.4          1.5         0.4 #> 33           5.2         4.1          1.5         0.1 #> 34           5.5         4.2          1.4         0.2 #> 35           4.9         3.1          1.5         0.2 #> 36           5.0         3.2          1.2         0.2 #> 37           5.5         3.5          1.3         0.2 #> 38           4.9         3.6          1.4         0.1 #> 39           4.4         3.0          1.3         0.2 #> 40           5.1         3.4          1.5         0.2 #> 41           5.0         3.5          1.3         0.3 #> 42           4.5         2.3          1.3         0.3 #> 43           4.4         3.2          1.3         0.2 #> 44           5.0         3.5          1.6         0.6 #> 45           5.1         3.8          1.9         0.4 #> 46           4.8         3.0          1.4         0.3 #> 47           5.1         3.8          1.6         0.2 #> 48           4.6         3.2          1.4         0.2 #> 49           5.3         3.7          1.5         0.2 #> 50           5.0         3.3          1.4         0.2 #> 51           7.0         3.2          4.7         1.4 #> 52           6.4         3.2          4.5         1.5 #> 53           6.9         3.1          4.9         1.5 #> 54           5.5         2.3          4.0         1.3 #> 55           6.5         2.8          4.6         1.5 #> 56           5.7         2.8          4.5         1.3 #> 57           6.3         3.3          4.7         1.6 #> 58           4.9         2.4          3.3         1.0 #> 59           6.6         2.9          4.6         1.3 #> 60           5.2         2.7          3.9         1.4 #> 61           5.0         2.0          3.5         1.0 #> 62           5.9         3.0          4.2         1.5 #> 63           6.0         2.2          4.0         1.0 #> 64           6.1         2.9          4.7         1.4 #> 65           5.6         2.9          3.6         1.3 #> 66           6.7         3.1          4.4         1.4 #> 67           5.6         3.0          4.5         1.5 #> 68           5.8         2.7          4.1         1.0 #> 69           6.2         2.2          4.5         1.5 #> 70           5.6         2.5          3.9         1.1 #> 71           5.9         3.2          4.8         1.8 #> 72           6.1         2.8          4.0         1.3 #> 73           6.3         2.5          4.9         1.5 #> 74           6.1         2.8          4.7         1.2 #> 75           6.4         2.9          4.3         1.3 #> 76           6.6         3.0          4.4         1.4 #> 77           6.8         2.8          4.8         1.4 #> 78           6.7         3.0          5.0         1.7 #> 79           6.0         2.9          4.5         1.5 #> 80           5.7         2.6          3.5         1.0 #> 81           5.5         2.4          3.8         1.1 #> 82           5.5         2.4          3.7         1.0 #> 83           5.8         2.7          3.9         1.2 #> 84           6.0         2.7          5.1         1.6 #> 85           5.4         3.0          4.5         1.5 #> 86           6.0         3.4          4.5         1.6 #> 87           6.7         3.1          4.7         1.5 #> 88           6.3         2.3          4.4         1.3 #> 89           5.6         3.0          4.1         1.3 #> 90           5.5         2.5          4.0         1.3 #> 91           5.5         2.6          4.4         1.2 #> 92           6.1         3.0          4.6         1.4 #> 93           5.8         2.6          4.0         1.2 #> 94           5.0         2.3          3.3         1.0 #> 95           5.6         2.7          4.2         1.3 #> 96           5.7         3.0          4.2         1.2 #> 97           5.7         2.9          4.2         1.3 #> 98           6.2         2.9          4.3         1.3 #> 99           5.1         2.5          3.0         1.1 #> 100          5.7         2.8          4.1         1.3 #> 101          6.3         3.3          6.0         2.5 #> 102          5.8         2.7          5.1         1.9 #> 103          7.1         3.0          5.9         2.1 #> 104          6.3         2.9          5.6         1.8 #> 105          6.5         3.0          5.8         2.2 #> 106          7.6         3.0          6.6         2.1 #> 107          4.9         2.5          4.5         1.7 #> 108          7.3         2.9          6.3         1.8 #> 109          6.7         2.5          5.8         1.8 #> 110          7.2         3.6          6.1         2.5 #> 111          6.5         3.2          5.1         2.0 #> 112          6.4         2.7          5.3         1.9 #> 113          6.8         3.0          5.5         2.1 #> 114          5.7         2.5          5.0         2.0 #> 115          5.8         2.8          5.1         2.4 #> 116          6.4         3.2          5.3         2.3 #> 117          6.5         3.0          5.5         1.8 #> 118          7.7         3.8          6.7         2.2 #> 119          7.7         2.6          6.9         2.3 #> 120          6.0         2.2          5.0         1.5 #> 121          6.9         3.2          5.7         2.3 #> 122          5.6         2.8          4.9         2.0 #> 123          7.7         2.8          6.7         2.0 #> 124          6.3         2.7          4.9         1.8 #> 125          6.7         3.3          5.7         2.1 #> 126          7.2         3.2          6.0         1.8 #> 127          6.2         2.8          4.8         1.8 #> 128          6.1         3.0          4.9         1.8 #> 129          6.4         2.8          5.6         2.1 #> 130          7.2         3.0          5.8         1.6 #> 131          7.4         2.8          6.1         1.9 #> 132          7.9         3.8          6.4         2.0 #> 133          6.4         2.8          5.6         2.2 #> 134          6.3         2.8          5.1         1.5 #> 135          6.1         2.6          5.6         1.4 #> 136          7.7         3.0          6.1         2.3 #> 137          6.3         3.4          5.6         2.4 #> 138          6.4         3.1          5.5         1.8 #> 139          6.0         3.0          4.8         1.8 #> 140          6.9         3.1          5.4         2.1 #> 141          6.7         3.1          5.6         2.4 #> 142          6.9         3.1          5.1         2.3 #> 143          5.8         2.7          5.1         1.9 #> 144          6.8         3.2          5.9         2.3 #> 145          6.7         3.3          5.7         2.5 #> 146          6.7         3.0          5.2         2.3 #> 147          6.3         2.5          5.0         1.9 #> 148          6.5         3.0          5.2         2.0 #> 149          6.2         3.4          5.4         2.3 #> 150          5.9         3.0          5.1         1.8 iris %>% select(where(function(x) is.numeric(x))) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1            5.1         3.5          1.4         0.2 #> 2            4.9         3.0          1.4         0.2 #> 3            4.7         3.2          1.3         0.2 #> 4            4.6         3.1          1.5         0.2 #> 5            5.0         3.6          1.4         0.2 #> 6            5.4         3.9          1.7         0.4 #> 7            4.6         3.4          1.4         0.3 #> 8            5.0         3.4          1.5         0.2 #> 9            4.4         2.9          1.4         0.2 #> 10           4.9         3.1          1.5         0.1 #> 11           5.4         3.7          1.5         0.2 #> 12           4.8         3.4          1.6         0.2 #> 13           4.8         3.0          1.4         0.1 #> 14           4.3         3.0          1.1         0.1 #> 15           5.8         4.0          1.2         0.2 #> 16           5.7         4.4          1.5         0.4 #> 17           5.4         3.9          1.3         0.4 #> 18           5.1         3.5          1.4         0.3 #> 19           5.7         3.8          1.7         0.3 #> 20           5.1         3.8          1.5         0.3 #> 21           5.4         3.4          1.7         0.2 #> 22           5.1         3.7          1.5         0.4 #> 23           4.6         3.6          1.0         0.2 #> 24           5.1         3.3          1.7         0.5 #> 25           4.8         3.4          1.9         0.2 #> 26           5.0         3.0          1.6         0.2 #> 27           5.0         3.4          1.6         0.4 #> 28           5.2         3.5          1.5         0.2 #> 29           5.2         3.4          1.4         0.2 #> 30           4.7         3.2          1.6         0.2 #> 31           4.8         3.1          1.6         0.2 #> 32           5.4         3.4          1.5         0.4 #> 33           5.2         4.1          1.5         0.1 #> 34           5.5         4.2          1.4         0.2 #> 35           4.9         3.1          1.5         0.2 #> 36           5.0         3.2          1.2         0.2 #> 37           5.5         3.5          1.3         0.2 #> 38           4.9         3.6          1.4         0.1 #> 39           4.4         3.0          1.3         0.2 #> 40           5.1         3.4          1.5         0.2 #> 41           5.0         3.5          1.3         0.3 #> 42           4.5         2.3          1.3         0.3 #> 43           4.4         3.2          1.3         0.2 #> 44           5.0         3.5          1.6         0.6 #> 45           5.1         3.8          1.9         0.4 #> 46           4.8         3.0          1.4         0.3 #> 47           5.1         3.8          1.6         0.2 #> 48           4.6         3.2          1.4         0.2 #> 49           5.3         3.7          1.5         0.2 #> 50           5.0         3.3          1.4         0.2 #> 51           7.0         3.2          4.7         1.4 #> 52           6.4         3.2          4.5         1.5 #> 53           6.9         3.1          4.9         1.5 #> 54           5.5         2.3          4.0         1.3 #> 55           6.5         2.8          4.6         1.5 #> 56           5.7         2.8          4.5         1.3 #> 57           6.3         3.3          4.7         1.6 #> 58           4.9         2.4          3.3         1.0 #> 59           6.6         2.9          4.6         1.3 #> 60           5.2         2.7          3.9         1.4 #> 61           5.0         2.0          3.5         1.0 #> 62           5.9         3.0          4.2         1.5 #> 63           6.0         2.2          4.0         1.0 #> 64           6.1         2.9          4.7         1.4 #> 65           5.6         2.9          3.6         1.3 #> 66           6.7         3.1          4.4         1.4 #> 67           5.6         3.0          4.5         1.5 #> 68           5.8         2.7          4.1         1.0 #> 69           6.2         2.2          4.5         1.5 #> 70           5.6         2.5          3.9         1.1 #> 71           5.9         3.2          4.8         1.8 #> 72           6.1         2.8          4.0         1.3 #> 73           6.3         2.5          4.9         1.5 #> 74           6.1         2.8          4.7         1.2 #> 75           6.4         2.9          4.3         1.3 #> 76           6.6         3.0          4.4         1.4 #> 77           6.8         2.8          4.8         1.4 #> 78           6.7         3.0          5.0         1.7 #> 79           6.0         2.9          4.5         1.5 #> 80           5.7         2.6          3.5         1.0 #> 81           5.5         2.4          3.8         1.1 #> 82           5.5         2.4          3.7         1.0 #> 83           5.8         2.7          3.9         1.2 #> 84           6.0         2.7          5.1         1.6 #> 85           5.4         3.0          4.5         1.5 #> 86           6.0         3.4          4.5         1.6 #> 87           6.7         3.1          4.7         1.5 #> 88           6.3         2.3          4.4         1.3 #> 89           5.6         3.0          4.1         1.3 #> 90           5.5         2.5          4.0         1.3 #> 91           5.5         2.6          4.4         1.2 #> 92           6.1         3.0          4.6         1.4 #> 93           5.8         2.6          4.0         1.2 #> 94           5.0         2.3          3.3         1.0 #> 95           5.6         2.7          4.2         1.3 #> 96           5.7         3.0          4.2         1.2 #> 97           5.7         2.9          4.2         1.3 #> 98           6.2         2.9          4.3         1.3 #> 99           5.1         2.5          3.0         1.1 #> 100          5.7         2.8          4.1         1.3 #> 101          6.3         3.3          6.0         2.5 #> 102          5.8         2.7          5.1         1.9 #> 103          7.1         3.0          5.9         2.1 #> 104          6.3         2.9          5.6         1.8 #> 105          6.5         3.0          5.8         2.2 #> 106          7.6         3.0          6.6         2.1 #> 107          4.9         2.5          4.5         1.7 #> 108          7.3         2.9          6.3         1.8 #> 109          6.7         2.5          5.8         1.8 #> 110          7.2         3.6          6.1         2.5 #> 111          6.5         3.2          5.1         2.0 #> 112          6.4         2.7          5.3         1.9 #> 113          6.8         3.0          5.5         2.1 #> 114          5.7         2.5          5.0         2.0 #> 115          5.8         2.8          5.1         2.4 #> 116          6.4         3.2          5.3         2.3 #> 117          6.5         3.0          5.5         1.8 #> 118          7.7         3.8          6.7         2.2 #> 119          7.7         2.6          6.9         2.3 #> 120          6.0         2.2          5.0         1.5 #> 121          6.9         3.2          5.7         2.3 #> 122          5.6         2.8          4.9         2.0 #> 123          7.7         2.8          6.7         2.0 #> 124          6.3         2.7          4.9         1.8 #> 125          6.7         3.3          5.7         2.1 #> 126          7.2         3.2          6.0         1.8 #> 127          6.2         2.8          4.8         1.8 #> 128          6.1         3.0          4.9         1.8 #> 129          6.4         2.8          5.6         2.1 #> 130          7.2         3.0          5.8         1.6 #> 131          7.4         2.8          6.1         1.9 #> 132          7.9         3.8          6.4         2.0 #> 133          6.4         2.8          5.6         2.2 #> 134          6.3         2.8          5.1         1.5 #> 135          6.1         2.6          5.6         1.4 #> 136          7.7         3.0          6.1         2.3 #> 137          6.3         3.4          5.6         2.4 #> 138          6.4         3.1          5.5         1.8 #> 139          6.0         3.0          4.8         1.8 #> 140          6.9         3.1          5.4         2.1 #> 141          6.7         3.1          5.6         2.4 #> 142          6.9         3.1          5.1         2.3 #> 143          5.8         2.7          5.1         1.9 #> 144          6.8         3.2          5.9         2.3 #> 145          6.7         3.3          5.7         2.5 #> 146          6.7         3.0          5.2         2.3 #> 147          6.3         2.5          5.0         1.9 #> 148          6.5         3.0          5.2         2.0 #> 149          6.2         3.4          5.4         2.3 #> 150          5.9         3.0          5.1         1.8 iris %>% select(where(function(x) is.numeric(x) && mean(x) > 3.5)) #>     Sepal.Length Petal.Length #> 1            5.1          1.4 #> 2            4.9          1.4 #> 3            4.7          1.3 #> 4            4.6          1.5 #> 5            5.0          1.4 #> 6            5.4          1.7 #> 7            4.6          1.4 #> 8            5.0          1.5 #> 9            4.4          1.4 #> 10           4.9          1.5 #> 11           5.4          1.5 #> 12           4.8          1.6 #> 13           4.8          1.4 #> 14           4.3          1.1 #> 15           5.8          1.2 #> 16           5.7          1.5 #> 17           5.4          1.3 #> 18           5.1          1.4 #> 19           5.7          1.7 #> 20           5.1          1.5 #> 21           5.4          1.7 #> 22           5.1          1.5 #> 23           4.6          1.0 #> 24           5.1          1.7 #> 25           4.8          1.9 #> 26           5.0          1.6 #> 27           5.0          1.6 #> 28           5.2          1.5 #> 29           5.2          1.4 #> 30           4.7          1.6 #> 31           4.8          1.6 #> 32           5.4          1.5 #> 33           5.2          1.5 #> 34           5.5          1.4 #> 35           4.9          1.5 #> 36           5.0          1.2 #> 37           5.5          1.3 #> 38           4.9          1.4 #> 39           4.4          1.3 #> 40           5.1          1.5 #> 41           5.0          1.3 #> 42           4.5          1.3 #> 43           4.4          1.3 #> 44           5.0          1.6 #> 45           5.1          1.9 #> 46           4.8          1.4 #> 47           5.1          1.6 #> 48           4.6          1.4 #> 49           5.3          1.5 #> 50           5.0          1.4 #> 51           7.0          4.7 #> 52           6.4          4.5 #> 53           6.9          4.9 #> 54           5.5          4.0 #> 55           6.5          4.6 #> 56           5.7          4.5 #> 57           6.3          4.7 #> 58           4.9          3.3 #> 59           6.6          4.6 #> 60           5.2          3.9 #> 61           5.0          3.5 #> 62           5.9          4.2 #> 63           6.0          4.0 #> 64           6.1          4.7 #> 65           5.6          3.6 #> 66           6.7          4.4 #> 67           5.6          4.5 #> 68           5.8          4.1 #> 69           6.2          4.5 #> 70           5.6          3.9 #> 71           5.9          4.8 #> 72           6.1          4.0 #> 73           6.3          4.9 #> 74           6.1          4.7 #> 75           6.4          4.3 #> 76           6.6          4.4 #> 77           6.8          4.8 #> 78           6.7          5.0 #> 79           6.0          4.5 #> 80           5.7          3.5 #> 81           5.5          3.8 #> 82           5.5          3.7 #> 83           5.8          3.9 #> 84           6.0          5.1 #> 85           5.4          4.5 #> 86           6.0          4.5 #> 87           6.7          4.7 #> 88           6.3          4.4 #> 89           5.6          4.1 #> 90           5.5          4.0 #> 91           5.5          4.4 #> 92           6.1          4.6 #> 93           5.8          4.0 #> 94           5.0          3.3 #> 95           5.6          4.2 #> 96           5.7          4.2 #> 97           5.7          4.2 #> 98           6.2          4.3 #> 99           5.1          3.0 #> 100          5.7          4.1 #> 101          6.3          6.0 #> 102          5.8          5.1 #> 103          7.1          5.9 #> 104          6.3          5.6 #> 105          6.5          5.8 #> 106          7.6          6.6 #> 107          4.9          4.5 #> 108          7.3          6.3 #> 109          6.7          5.8 #> 110          7.2          6.1 #> 111          6.5          5.1 #> 112          6.4          5.3 #> 113          6.8          5.5 #> 114          5.7          5.0 #> 115          5.8          5.1 #> 116          6.4          5.3 #> 117          6.5          5.5 #> 118          7.7          6.7 #> 119          7.7          6.9 #> 120          6.0          5.0 #> 121          6.9          5.7 #> 122          5.6          4.9 #> 123          7.7          6.7 #> 124          6.3          4.9 #> 125          6.7          5.7 #> 126          7.2          6.0 #> 127          6.2          4.8 #> 128          6.1          4.9 #> 129          6.4          5.6 #> 130          7.2          5.8 #> 131          7.4          6.1 #> 132          7.9          6.4 #> 133          6.4          5.6 #> 134          6.3          5.1 #> 135          6.1          5.6 #> 136          7.7          6.1 #> 137          6.3          5.6 #> 138          6.4          5.5 #> 139          6.0          4.8 #> 140          6.9          5.4 #> 141          6.7          5.6 #> 142          6.9          5.1 #> 143          5.8          5.1 #> 144          6.8          5.9 #> 145          6.7          5.7 #> 146          6.7          5.2 #> 147          6.3          5.0 #> 148          6.5          5.2 #> 149          6.2          5.4 #> 150          5.9          5.1"},{"path":"/reference/window_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Windowed Rank Functions — window_rank","title":"Windowed Rank Functions — window_rank","text":"Six variations ranking functions, mimicking ranking functions described SQL2003. currently implemented using built rank() function. ranking functions map smallest inputs smallest outputs. Use desc() reverse direction.","code":""},{"path":"/reference/window_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Windowed Rank Functions — window_rank","text":"","code":"cume_dist(x)  dense_rank(x)  min_rank(x)  ntile(x = row_number(), n)  percent_rank(x)  row_number(x)"},{"path":"/reference/window_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Windowed Rank Functions — window_rank","text":"x vector values rank. Missing values left . want treat smallest largest values, replace Inf -Inf ranking. n integer(1). number groups split .","code":""},{"path":"/reference/window_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Windowed Rank Functions — window_rank","text":"cume_dist(): cumulative distribution function. Proportion values less equal current rank. dense_rank(): like min_rank(), gaps ranks min_rank(): equivalent rank(ties.method = \"min\") ntile(): rough rank, breaks input vector n buckets. size buckets may differ one, larger buckets lower rank. percent_rank(): number 0 1 computed rescaling min_rank [0, 1] row_number(): equivalent rank(ties.method = \"first\")","code":""},{"path":"/reference/window_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Windowed Rank Functions — window_rank","text":"","code":"x <- c(5, 1, 3, 2, 2, NA) row_number(x) #> [1]  5  1  4  2  3 NA min_rank(x) #> [1]  5  1  4  2  2 NA dense_rank(x) #> [1]  4  1  3  2  2 NA percent_rank(x) #> [1] 1.00 0.00 0.75 0.25 0.25   NA cume_dist(x) #> [1] 1.0 0.2 0.8 0.6 0.6  NA  ntile(x, 2) #> [1]  2  1  2  1  1 NA ntile(1:8, 3) #> [1] 1 1 1 2 2 2 3 3  # row_number can be used with single table verbs without specifying x # (for data frames and databases that support windowing) mutate(mtcars, row_number() == 1L) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>                     row_number() == 1L #> Mazda RX4                         TRUE #> Mazda RX4 Wag                    FALSE #> Datsun 710                       FALSE #> Hornet 4 Drive                   FALSE #> Hornet Sportabout                FALSE #> Valiant                          FALSE #> Duster 360                       FALSE #> Merc 240D                        FALSE #> Merc 230                         FALSE #> Merc 280                         FALSE #> Merc 280C                        FALSE #> Merc 450SE                       FALSE #> Merc 450SL                       FALSE #> Merc 450SLC                      FALSE #> Cadillac Fleetwood               FALSE #> Lincoln Continental              FALSE #> Chrysler Imperial                FALSE #> Fiat 128                         FALSE #> Honda Civic                      FALSE #> Toyota Corolla                   FALSE #> Toyota Corona                    FALSE #> Dodge Challenger                 FALSE #> AMC Javelin                      FALSE #> Camaro Z28                       FALSE #> Pontiac Firebird                 FALSE #> Fiat X1-9                        FALSE #> Porsche 914-2                    FALSE #> Lotus Europa                     FALSE #> Ford Pantera L                   FALSE #> Ferrari Dino                     FALSE #> Maserati Bora                    FALSE #> Volvo 142E                       FALSE mtcars %>% filter(between(row_number(), 1, 10)) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4"},{"path":"/reference/with_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform an operation with temporary groups — with_groups","title":"Perform an operation with temporary groups — with_groups","text":"function allows modify grouping variables single operation.","code":""},{"path":"/reference/with_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform an operation with temporary groups — with_groups","text":"","code":"with_groups(.data, .groups, .f, ...)"},{"path":"/reference/with_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform an operation with temporary groups — with_groups","text":".data data.frame. .groups <poor-select> One variables group . Unlike group_by(), can group existing variables, can use poor-select syntax like c(x, y, z) select multiple variables. Use NULL temporarily ungroup. .f function apply regrouped data. Supports lambda-style ~ syntax. ... Additional arguments passed .f.","code":""},{"path":"/reference/with_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform an operation with temporary groups — with_groups","text":"","code":"df <- data.frame(g = c(1, 1, 2, 2, 3), x = runif(5)) df %>% with_groups(g, mutate, x_mean = mean(x)) #>   g         x    x_mean #> 1 1 0.6722033 0.8137343 #> 2 1 0.9552653 0.8137343 #> 3 2 0.3660935 0.2711896 #> 4 2 0.1762858 0.2711896 #> 5 3 0.9588048 0.9588048 df %>% with_groups(g, ~ mutate(.x, x_mean = mean(x))) #>   g         x    x_mean #> 1 1 0.6722033 0.8137343 #> 2 1 0.9552653 0.8137343 #> 3 2 0.3660935 0.2711896 #> 4 2 0.1762858 0.2711896 #> 5 3 0.9588048 0.9588048  df %>%   group_by(g) %>%   with_groups(NULL, mutate, x_mean = mean(x)) #>   g         x    x_mean #> 1 1 0.6722033 0.6257305 #> 2 1 0.9552653 0.6257305 #> 3 2 0.3660935 0.6257305 #> 4 2 0.1762858 0.6257305 #> 5 3 0.9588048 0.6257305  # NB: grouping can't be restored if you remove the grouping variables df %>%   group_by(g) %>%   with_groups(NULL, mutate, g = NULL) #>           x #> 1 0.6722033 #> 2 0.9552653 #> 3 0.3660935 #> 4 0.1762858 #> 5 0.9588048"},{"path":"/news/index.html","id":"poorman-026","dir":"Changelog","previous_headings":"","what":"poorman 0.2.6","title":"poorman 0.2.6","text":"CRAN release: 2022-08-17 update adds following features: Initial versions pivot_longer() pivot_wider() added (#101, @etiennebacher). .names argument across() now accepts {.col} {.fn} automatically name new columns (#100, @etiennebacher). New function lst() reproduce outputs tibble::lst(). enables creation lists elements build sequentially (.e depend previous ones) self-named (.e expression used name given) (#108). following fixes also implemented: arrange() now works descending character vectors (#99, @etiennebacher). arrange() now resets row names numeric (#102, @etiennebacher). distinct() now resets row names numeric (#106, @etiennebacher). CICD pipeline also fixed users can now tests pull requests. documentation now built using HTML5.","code":""},{"path":"/news/index.html","id":"poorman-025","dir":"Changelog","previous_headings":"","what":"poorman 0.2.5","title":"poorman 0.2.5","text":"CRAN release: 2021-03-28 Ninth CRAN release. update added following new features: summarise() can now revise grouping structures .groups argument (#57). group_by() can now drop groups formed factor levels don’t appear data .drop parameter (#63). New cumulative functions added: cumall(), cumany() cummean() (#64). Additional tools working rownames added: has_rownames(), remove_rownames(), column_to_rownames(), rowid_to_column() (#66). filter() gains .preserve parameters (#81). if_any() if_all() added (#80). following fixes also implemented: mutate() now successfully evaluates functions defined scope parent function (#68). select_positions() now works passed combination positive negative values (#71). transmute() now keeps unnamed columns creates (#72). following refactorisations took place: grouping data group_by(), now create object class grouped_df grouped_data keeps consistent {dplyr} method name (#70). hopefully make transitioning packages {dplyr} {poorman} little easier.","code":""},{"path":"/news/index.html","id":"poorman-024","dir":"Changelog","previous_headings":"","what":"poorman 0.2.4","title":"poorman 0.2.4","text":"CRAN release: 2020-11-27 Eighth CRAN release. update added following new features: group_by() can now create new columns, grouping result (#58). with_groups() (#61). nth() (#62). mutate() can now relocate resulting mutations (#59). mutate() can now keep , used, unused none resulting mutations (#60). across() can now accept lambda style functions (#52). Columns created summarise() now immediately available (#20). cur_column() (#52). following fixes also implemented: across() can now accept function names characters (#56) - thanks @Eyayaw pointing . empty summarise() now correctly return empty data.frame (#55). general refactorisations improvements note: group_by() now S3 generic. .default() methods now .data.frame() methods. get_groups() removed favour group_vars(). set_groups() replaced groups_set() API consistency.","code":""},{"path":"/news/index.html","id":"poorman-023","dir":"Changelog","previous_headings":"","what":"poorman 0.2.3","title":"poorman 0.2.3","text":"CRAN release: 2020-11-12 Seventh CRAN release. update added following new features: across() (#37). na_matches keep parameters added mutate joins. list columns can now mutated. Added missing ability use & poor-select. Fixes: Use variables relocate(). addition lots improvements documentation many, many tests added.","code":""},{"path":"/news/index.html","id":"poorman-022","dir":"Changelog","previous_headings":"","what":"poorman 0.2.2","title":"poorman 0.2.2","text":"CRAN release: 2020-10-11 Sixth CRAN release. update added following new features: rename_with() group_cols() (#42) cur_data_all() nest_by() (#44) case_when() (#23) bind_cols() (#32) bind_rows() (#33) unite() Performance upgrades code improvements: pull() now much faster thanks @markfairbanks. %>% now allows pipe .; thanks go @moodymudskipper. following bugs squashed: Filter joins longer reduce vectors thanks @msberends. contains() longer returns lists. relocate() can now use “tidy select” style column selections. New documentation components added: FAQ vignette added (#31). pkgdown website added (#30).","code":""},{"path":"/news/index.html","id":"poorman-021","dir":"Changelog","previous_headings":"","what":"poorman 0.2.1","title":"poorman 0.2.1","text":"CRAN release: 2020-07-01 Fifth CRAN release. update added following new features: distinct() (#17) slice_head(), slice_tail(), slice_min(), slice_max(), slice_sample() (#22) () (#27) coalesce() (#28) group_split(), group_keys() (#29) na_if() (#34) recode() (#35) near() (#36) replace_na() (#38) group_data(), group_indices(), group_vars(), group_rows(), group_size(), n_groups(), groups() (#39) glimpse() (#40) cur_data(), cur_group(), cur_group_id(), cur_group_rows() (#41) also lot refactoring internals package, particularly focusing context awareness allows quite features (#40, #41) grouped operations now consistent. update course comes host bug fixes including renaming multiple columns using poorman’s version tidyselect.","code":""},{"path":"/news/index.html","id":"poorman-020","dir":"Changelog","previous_headings":"","what":"poorman 0.2.0","title":"poorman 0.2.0","text":"CRAN release: 2020-05-10 Fourth CRAN release. update added following new features: if_else() (#11) () (#12) lead() lag() (#13) n_distinct() (#16) window rank functions: cume_dist(), dense_rank(), min_rank(), ntile(), percent_rank(), row_number() (#18) thanks go @msberends help features! update also refactors lot code, hence minor version bump. includes: support “tidyselect” features !, :, -, c() () Removal eval(parse(text = ...) Rework grouped summaries Finally, 0.2.0 includes many bug fixes: Joins now maintain original order (#10) group_by() + mutate() now preserve row order (#14) Quote names allowed pull() (#15)","code":""},{"path":"/news/index.html","id":"poorman-0111","dir":"Changelog","previous_headings":"","what":"poorman 0.1.11","title":"poorman 0.1.11","text":"CRAN release: 2020-04-22 Third CRAN release. update adds functions count(), tally(), add_count() add_tally(). order achieve , functions n() desc() also added. addition, group_by() can now add additional groups already grouped data.frame.","code":""},{"path":"/news/index.html","id":"poorman-0110","dir":"Changelog","previous_headings":"","what":"poorman 0.1.10","title":"poorman 0.1.10","text":"CRAN release: 2020-04-13 Second CRAN release. update adds selection helper functions. See ?select_helpers information. following bugs fixed: mutate() column creations immediately available, e.g. mtcars %>% mutate(mpg2 = mpg * 2, mpg4 = mpg2 * 2) create columns named mpg2 mpg4 group_by() groups now persist selections, e.g. mtcars %>% group_by() %>% select(mpg) return mpg columns slice() now duplicates rows, e.g. mtcars %>% slice(2, 2, 2) return row 2 three times summarize() now exported","code":""},{"path":"/news/index.html","id":"poorman-019","dir":"Changelog","previous_headings":"","what":"poorman 0.1.9","title":"poorman 0.1.9","text":"CRAN release: 2020-04-01 First CRAN release","code":""},{"path":"/news/index.html","id":"poorman-018","dir":"Changelog","previous_headings":"","what":"poorman 0.1.8","title":"poorman 0.1.8","text":"update adds relocate() consolidates selection method select(), rename() relocate() using select_positions().","code":""},{"path":"/news/index.html","id":"poorman-017","dir":"Changelog","previous_headings":"","what":"poorman 0.1.7","title":"poorman 0.1.7","text":"update adds semi_join() anti_join().","code":""},{"path":"/news/index.html","id":"poorman-016","dir":"Changelog","previous_headings":"","what":"poorman 0.1.6","title":"poorman 0.1.6","text":"update adds inner_join(), left_join(), right_join() full_join().","code":""},{"path":"/news/index.html","id":"poorman-015","dir":"Changelog","previous_headings":"","what":"poorman 0.1.5","title":"poorman 0.1.5","text":"update adds full set tests functions available v0.1.5.","code":""},{"path":"/news/index.html","id":"poorman-014","dir":"Changelog","previous_headings":"","what":"poorman 0.1.4","title":"poorman 0.1.4","text":"update adds copy pipe (%>%).","code":""},{"path":"/news/index.html","id":"poorman-013","dir":"Changelog","previous_headings":"","what":"poorman 0.1.3","title":"poorman 0.1.3","text":"update adds summarise().","code":""},{"path":"/news/index.html","id":"poorman-012","dir":"Changelog","previous_headings":"","what":"poorman 0.1.2","title":"poorman 0.1.2","text":"update adds rename().","code":""},{"path":"/news/index.html","id":"poorman-011","dir":"Changelog","previous_headings":"","what":"poorman 0.1.1","title":"poorman 0.1.1","text":"update includes group_by() ungroup() operations.","code":""},{"path":"/news/index.html","id":"poorman-010","dir":"Changelog","previous_headings":"","what":"poorman 0.1.0","title":"poorman 0.1.0","text":"initial version includes select(), pull(), arrange(), filter(), slice(), mutate() transmute() functions. See blog post details.","code":""}]
