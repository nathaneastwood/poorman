% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gluestick.R
\name{gluestick}
\alias{gluestick}
\title{String interpolation}
\usage{
gluestick(fmt, src = parent.frame(), open = "{", close = "}", eval = TRUE)
}
\arguments{
\item{fmt}{single character string containing the format specification.}

\item{src}{data source. An \code{environment}, \code{list},
\code{data.frame} or anything supported by \code{as.environment()}.
Default: \code{parent.frame()} i.e. the calling environment}

\item{open, close}{the opening and closing character strings which delimit an expression.
Default: \code{{}}.  Note: the delimiters can be more complex than
just a single character}

\item{eval}{logical. Should the expressions be treated as R code to be
evaluated? Default: TRUE means to treat the expressions as R code and
evaluate.  If FALSE, then no code evaluation will ever be
done and expressions will be treated as only variable
names in the given \code{src} data.  This may be safer in some contexts
e.g. for user supplied fmt strings.}
}
\description{
Expressions enclosed by specified delimiters will be evaluated as R code
within the context of the \code{src} data/environment.  The results will
then be inserted into the original string via \code{sprintf()}
i.e. string interpolation.
}
\examples{
gluestick("Hello {name}", list(name = '#RStats'))
gluestick("Hello ~!name!~", list(name = '#RStats'), open = "~!", close = "!~")
name <- '#RStats'; gluestick("Hello {name}")

}
